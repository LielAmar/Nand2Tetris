/** The Bird Object for FlappyBird game. */
class Pillar {

  // Constants
  field int velocity;
  field int width;

  field int x;
  field int height;

  /** Constructs a new bird with a given location. */
  constructor Pillar new(int initHeight, int initVelocity) {
    // Initializing constants
    let velocity = initVelocity;
    let width = 40;

    let x = 511; // Starting x pos
    let height = initHeight;

    do render();
    return this;
  }

  /** Disposes the bird. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  /** Renders the bird on the screen. */
  method void render() {
    do Screen.setColor(true);

    // Top pillar
    do Screen.drawRectangle(Math.max(x, 0), 0,
        Math.min(Math.max(0, x + width), 511), 0 + height);

    do Screen.drawRectangle(Math.max(x - 5, 0), height - 5,
        Math.min(Math.max(0, x + width + 5), 511), height);

    // Bottom pillar
    do Screen.drawRectangle(Math.max(x, 0), 255 - height,
        Math.min(Math.max(0, x + width), 511), 255);

    do Screen.drawRectangle(Math.max(x - 5, 0), 255 - height - 5,
        Math.min(Math.max(0, x + width + 5), 511), 255 - height);

    return;
   }

  /** Erases the bird from the screen. */
  method void erase() {
    do Screen.setColor(false);

    // Top pillar
    do Screen.drawRectangle(Math.max(x, 0), 0,
        Math.min(Math.max(0, x + width), 511), 0 + height);

    do Screen.drawRectangle(Math.max(x - 5, 0), height - 5,
        Math.min(Math.max(0, x + width + 5), 511), height);

    // Bottom pillar
    do Screen.drawRectangle(Math.max(x, 0), 255 - height,
        Math.min(Math.max(0, x + width), 511), 255);

    do Screen.drawRectangle(Math.max(x - 5, 0), 255 - height - 5,
        Math.min(Math.max(0, x + width + 5), 511), 255 - height);

    return;
  }

  /** Ticks the bird to update it's speed. */
  method void tick() {
    do erase();
    let x = x + velocity;
    do render();
    
    return;
  }

  method boolean isOut() {
    if((x + width) < 0) {
      return true;
    }

    return false;
  }

  method int getX() {
    return x;
  }

  method int getWidth() {
    return width;
  }

  method boolean hasColided(int objX, int objY, int objWidth, int objHeight) {
    var int pillarStartingX, pillarEndingX, bottomPillarStartY;
    var int objStartingX, objEndingX, objStartingY, objEndingY;

    let pillarStartingX = x - 5;
    let pillarEndingX = x + width + 5;

    let objStartingX = objX;
    let objEndingX = objX + objWidth;
    let objStartingY = objY;
    let objEndingY = objY + objHeight;

    // If object x is within the pillar x
    if(((objStartingX > pillarStartingX) & (objStartingX < pillarEndingX)) | 
        ((objEndingX > pillarStartingX) & (objEndingX < pillarEndingX))) {
      
      // Checking top pillar
      if(((objStartingY > -1) & (objStartingY < height)) |
          ((objEndingY > -1) & (objEndingY < height))) {
        return true;
      }

      let bottomPillarStartY = 256 - height;

      // do Output.moveCursor(10, 0);
      // do Output.printString("Object is within pillar x");
      // do Output.println();
      // do Output.printString("Object Y: ");
      // do Output.printInt(objStartingY);
      // do Output.println();
      // do Output.printString("Pillar Y: ");
      // do Output.printInt(bottomPillarStartY);
      // do Output.moveCursor(10, 0);

      // Checking bottom pillar
      if(((objStartingY > bottomPillarStartY) & (objStartingY < 512)) |
          ((objEndingY > bottomPillarStartY) & (objEndingY < 512))) {
        return true;
      }
    }

    return false;
  }
}
