<class>
  <keyword> class </keyword>
  <identifier> Sea </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Ship </identifier>
    <identifier> _ship </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Bomb </identifier>
    <identifier> _bomb </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> boolean </keyword>
    <identifier> _shoot </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> _score </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> _laps </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> _sub_dir </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Array </identifier>
    <identifier> _subs </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Array </identifier>
    <identifier> _subs_location </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Array </identifier>
    <identifier> _heights </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> _sub_width </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> _sub_height </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> _num_of_subs </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> _ship_speed </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> _bomb_speed </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> int </keyword>
    <identifier> _ship_x </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> int </keyword>
    <identifier> _ship_y </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> int </keyword>
    <identifier> _ship_width </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> int </keyword>
    <identifier> _ship_height </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> int </keyword>
    <identifier> _bomb_size </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> Sea </identifier>
    <identifier> new </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> level </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> sub_speed </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> bombSize </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> height </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> subLocation </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> index </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> direction </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _num_of_subs </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 3 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sub_speed </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 5 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _ship_x </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 50 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _ship_y </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 54 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _ship_width </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 80 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _ship_height </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 16 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _ship_speed </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 13 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _bomb_size </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _bomb_speed </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 10 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _laps </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 10 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> level </identifier>
            </term>
            <symbol> = </symbol>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> sub_speed </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 8 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> _laps </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 8 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> level </identifier>
            </term>
            <symbol> = </symbol>
            <term>
              <integerConstant> 3 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> sub_speed </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 10 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> _bomb_size </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> _laps </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 6 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _ship </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Ship </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> _ship_x </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> _ship_y </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> _ship_width </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> _ship_height </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> _ship_speed </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> _bomb_size </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> _bomb_speed </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _heights </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Array </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> _num_of_subs </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _heights </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 120 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _heights </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 170 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _heights </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 220 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _subs_location </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Array </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> _num_of_subs </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _subs_location </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 100 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _subs_location </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 430 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _subs_location </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 70 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _sub_width </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 35 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _sub_height </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 12 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sub_speed </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> sub_speed </identifier>
            </term>
            <symbol> + </symbol>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> direction </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <symbol> - </symbol>
              <term>
                <integerConstant> 1 </integerConstant>
              </term>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _sub_dir </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> direction </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _subs </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Array </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> _num_of_subs </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> index </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> index </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <identifier> _num_of_subs </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> height </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> _heights </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <identifier> index </identifier>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> subLocation </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> _subs_location </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <identifier> index </identifier>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> _subs </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <identifier> index </identifier>
                </term>
              </expression>
              <symbol> ] </symbol>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> SubMarine </identifier>
                  <symbol> . </symbol>
                  <identifier> new </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <identifier> subLocation </identifier>
                      </term>
                    </expression>
                    <symbol> , </symbol>
                    <expression>
                      <term>
                        <identifier> height </identifier>
                      </term>
                    </expression>
                    <symbol> , </symbol>
                    <expression>
                      <term>
                        <identifier> _sub_width </identifier>
                      </term>
                    </expression>
                    <symbol> , </symbol>
                    <expression>
                      <term>
                        <identifier> _sub_height </identifier>
                      </term>
                    </expression>
                    <symbol> , </symbol>
                    <expression>
                      <term>
                        <identifier> sub_speed </identifier>
                      </term>
                    </expression>
                    <symbol> , </symbol>
                    <expression>
                      <term>
                        <identifier> direction </identifier>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> sub_speed </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> sub_speed </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> index </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> index </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> direction </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> Math </identifier>
                  <symbol> . </symbol>
                  <identifier> multiply </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <identifier> direction </identifier>
                      </term>
                    </expression>
                    <symbol> , </symbol>
                    <expression>
                      <term>
                        <identifier> direction </identifier>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _score </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> _shoot </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <keyword> false </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> this </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier> SubMarine </identifier>
        <identifier> sub </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> index </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> _ship </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> index </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> index </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <identifier> _num_of_subs </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> sub </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> _subs </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <identifier> index </identifier>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> sub </identifier>
              <symbol> . </symbol>
              <identifier> dispose </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> index </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> index </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> _shoot </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> _bomb </identifier>
              <symbol> . </symbol>
              <identifier> dispose </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Memory </identifier>
          <symbol> . </symbol>
          <identifier> deAlloc </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> this </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> updateScore </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Sys </identifier>
          <symbol> . </symbol>
          <identifier> wait </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 1000 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> Score:  </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printInt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> _score </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant>   </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> updateLaps </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> laps </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 1 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> Laps left:  </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printInt </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> laps </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant>   </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> hitSub </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> index </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier> SubMarine </identifier>
        <identifier> sub </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> subLocation </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sub </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> _subs </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <identifier> index </identifier>
                </term>
              </expression>
              <symbol> ] </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> subLocation </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> _subs_location </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <identifier> index </identifier>
                </term>
              </expression>
              <symbol> ] </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> _bomb </identifier>
              <symbol> . </symbol>
              <identifier> inXMargine </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> sub </identifier>
                    <symbol> . </symbol>
                    <identifier> getX </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> sub </identifier>
                    <symbol> . </symbol>
                    <identifier> getWidth </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> moveCursor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 10 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> printString </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant> Hit! </stringConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> _bomb </identifier>
              <symbol> . </symbol>
              <identifier> dispose </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> _shoot </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <keyword> false </keyword>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> sub </identifier>
              <symbol> . </symbol>
              <identifier> blink </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> moveCursor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 10 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> printString </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant>      </stringConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> sub </identifier>
              <symbol> . </symbol>
              <identifier> setX </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> subLocation </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> sub </identifier>
              <symbol> . </symbol>
              <identifier> swapDirections </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> _score </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> _score </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier> index </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> updateScore </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> checkHits </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier> SubMarine </identifier>
        <identifier> sub </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> height </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> subLocation </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sub </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> _subs </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ] </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> height </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> _heights </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ] </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> _bomb </identifier>
              <symbol> . </symbol>
              <identifier> inYMargine </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> height </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> sub </identifier>
                    <symbol> . </symbol>
                    <identifier> getHeight </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                    </expressionList>
                    <symbol> ) </symbol>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> hitSub </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> sub </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> _subs </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> height </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> _heights </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> _bomb </identifier>
                  <symbol> . </symbol>
                  <identifier> inYMargine </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <identifier> height </identifier>
                      </term>
                    </expression>
                    <symbol> , </symbol>
                    <expression>
                      <term>
                        <identifier> sub </identifier>
                        <symbol> . </symbol>
                        <identifier> getHeight </identifier>
                        <symbol> ( </symbol>
                        <expressionList>
                        </expressionList>
                        <symbol> ) </symbol>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> hitSub </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <integerConstant> 1 </integerConstant>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> sub </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> _subs </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> height </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> _heights </identifier>
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> _bomb </identifier>
                      <symbol> . </symbol>
                      <identifier> inYMargine </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> height </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> sub </identifier>
                            <symbol> . </symbol>
                            <identifier> getHeight </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                            </expressionList>
                            <symbol> ) </symbol>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> hitSub </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <integerConstant> 0 </integerConstant>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> drawScene </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier> SubMarine </identifier>
        <identifier> sub </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> index </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> clearScreen </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> updateScore </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> updateLaps </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> _laps </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 62 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 511 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 62 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawCircle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 480 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 10 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 480 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 480 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 37 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 480 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 480 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 3 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 480 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 497 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 480 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 463 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 480 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 492 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 32 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 480 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 492 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 8 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 480 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 468 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 32 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 480 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 468 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 8 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 16 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 24 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 20 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 100 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 96 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 100 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 104 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 100 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 100 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 170 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 166 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 247 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 170 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 174 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 247 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 170 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 170 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 247 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 246 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 254 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 310 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 306 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 242 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 310 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 314 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 242 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 310 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 310 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 242 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 410 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 406 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 410 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 414 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 410 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 410 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 502 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 498 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 502 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 506 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawLine </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 502 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 255 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 502 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 250 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> _ship </identifier>
          <symbol> . </symbol>
          <identifier> draw </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> index </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> index </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <identifier> _num_of_subs </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> sub </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> _subs </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <identifier> index </identifier>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> sub </identifier>
              <symbol> . </symbol>
              <identifier> draw </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> index </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> index </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> boolean </keyword>
    <identifier> newGame </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> key </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> clearScreen </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 3 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 24 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> GAME OVER </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 12 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> Would you like to play another game? (y/n) </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <keyword> true </keyword>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> key </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> Keyboard </identifier>
                  <symbol> . </symbol>
                  <identifier> keyPressed </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 78 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> Screen </identifier>
                  <symbol> . </symbol>
                  <identifier> clearScreen </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> Output </identifier>
                  <symbol> . </symbol>
                  <identifier> moveCursor </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <integerConstant> 10 </integerConstant>
                      </term>
                    </expression>
                    <symbol> , </symbol>
                    <expression>
                      <term>
                        <integerConstant> 15 </integerConstant>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> Output </identifier>
                  <symbol> . </symbol>
                  <identifier> printString </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <stringConstant> DIE HARD !!!  BYE BYE... </stringConstant>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> Sys </identifier>
                  <symbol> . </symbol>
                  <identifier> wait </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <integerConstant> 3000 </integerConstant>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> Screen </identifier>
                  <symbol> . </symbol>
                  <identifier> clearScreen </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <returnStatement>
                  <keyword> return </keyword>
                  <expression>
                    <term>
                      <keyword> false </keyword>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </returnStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 89 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <returnStatement>
                  <keyword> return </keyword>
                  <expression>
                    <term>
                      <keyword> true </keyword>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </returnStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> false </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> boolean </keyword>
    <identifier> run </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <identifier> exit </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> key </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <identifier> exists </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <identifier> SubMarine </identifier>
        <identifier> sub </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> index </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> laps </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> laps </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> _laps </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> exit </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <keyword> false </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> key </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> exists </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <keyword> true </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> drawScene </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <identifier> exit </identifier>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <whileStatement>
              <keyword> while </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 0 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> index </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 0 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                  <keyword> while </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> index </identifier>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <identifier> _num_of_subs </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> sub </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> _subs </identifier>
                          <symbol> [ </symbol>
                          <expression>
                            <term>
                              <identifier> index </identifier>
                            </term>
                          </expression>
                          <symbol> ] </symbol>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> sub </identifier>
                      <symbol> . </symbol>
                      <identifier> move </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> index </identifier>
                            </term>
                            <symbol> = </symbol>
                            <term>
                              <integerConstant> 0 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                        <symbol> &amp; </symbol>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> Math </identifier>
                              <symbol> . </symbol>
                              <identifier> multiply </identifier>
                              <symbol> ( </symbol>
                              <expressionList>
                                <expression>
                                  <term>
                                    <identifier> sub </identifier>
                                    <symbol> . </symbol>
                                    <identifier> getDir </identifier>
                                    <symbol> ( </symbol>
                                    <expressionList>
                                    </expressionList>
                                    <symbol> ) </symbol>
                                  </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                  <term>
                                    <symbol> - </symbol>
                                    <term>
                                      <integerConstant> 1 </integerConstant>
                                    </term>
                                  </term>
                                </expression>
                              </expressionList>
                              <symbol> ) </symbol>
                            </term>
                            <symbol> = </symbol>
                            <term>
                              <identifier> _sub_dir </identifier>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> laps </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <identifier> laps </identifier>
                            </term>
                            <symbol> - </symbol>
                            <term>
                              <integerConstant> 1 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                        <doStatement>
                          <keyword> do </keyword>
                          <identifier> updateLaps </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                            <expression>
                              <term>
                                <identifier> laps </identifier>
                              </term>
                            </expression>
                          </expressionList>
                          <symbol> ) </symbol>
                          <symbol> ; </symbol>
                        </doStatement>
                        <ifStatement>
                          <keyword> if </keyword>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> laps </identifier>
                            </term>
                            <symbol> = </symbol>
                            <term>
                              <integerConstant> 0 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                          <symbol> { </symbol>
                          <statements>
                            <returnStatement>
                              <keyword> return </keyword>
                              <expression>
                                <term>
                                  <identifier> newGame </identifier>
                                  <symbol> ( </symbol>
                                  <expressionList>
                                  </expressionList>
                                  <symbol> ) </symbol>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </returnStatement>
                          </statements>
                          <symbol> } </symbol>
                        </ifStatement>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> _sub_dir </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <identifier> Math </identifier>
                              <symbol> . </symbol>
                              <identifier> multiply </identifier>
                              <symbol> ( </symbol>
                              <expressionList>
                                <expression>
                                  <term>
                                    <identifier> _sub_dir </identifier>
                                  </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                  <term>
                                    <symbol> - </symbol>
                                    <term>
                                      <integerConstant> 1 </integerConstant>
                                    </term>
                                  </term>
                                </expression>
                              </expressionList>
                              <symbol> ) </symbol>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> index </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> index </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </whileStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> _shoot </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> exists </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> _bomb </identifier>
                          <symbol> . </symbol>
                          <identifier> move </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                          </expressionList>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> checkHits </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <symbol> ~ </symbol>
                          <term>
                            <identifier> exists </identifier>
                          </term>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <doStatement>
                          <keyword> do </keyword>
                          <identifier> _bomb </identifier>
                          <symbol> . </symbol>
                          <identifier> dispose </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                          </expressionList>
                          <symbol> ) </symbol>
                          <symbol> ; </symbol>
                        </doStatement>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> exists </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <keyword> true </keyword>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> _shoot </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <keyword> false </keyword>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> key </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> Keyboard </identifier>
                      <symbol> . </symbol>
                      <identifier> keyPressed </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </whileStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 130 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> _ship </identifier>
                  <symbol> . </symbol>
                  <identifier> move </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 132 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> _ship </identifier>
                  <symbol> . </symbol>
                  <identifier> move </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <integerConstant> 1 </integerConstant>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 32 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <identifier> _shoot </identifier>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> _bomb </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> _ship </identifier>
                          <symbol> . </symbol>
                          <identifier> shoot </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                          </expressionList>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> _bomb </identifier>
                      <symbol> . </symbol>
                      <identifier> draw </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> _shoot </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <keyword> true </keyword>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 81 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> exit </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <keyword> true </keyword>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> key </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 0 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> newGame </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
