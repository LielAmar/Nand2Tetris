// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    static int QUOTES_ASCII;
    static int MINUS_ASCII;
    static int ZERO_ASCII;
    static int NINE_ASCII;
    static int NEW_LINE_ASCII;
    static int BACKSPACE_ASCII;

    field Array characters;
    field int arrayLength;
    field int length;

    /**
     * Initializes the String's library constants
     */
    function void init() {
        let QUOTES_ASCII = 34;
        let MINUS_ASCII = 45;
        let ZERO_ASCII = 48;
        let NINE_ASCII = 57;
        let NEW_LINE_ASCII = 128;
        let BACKSPACE_ASCII = 129;
    }

    /** 
     * constructs a new empty string with a maximum length of maxLength
     * and initial length of 0.
     */
    constructor String new(int maxLength) {
        // The minimum accepted String length is 1
        if(~(maxLength > 0)) {
            let maxLength = 1; 
        }

        let characters = Array.new(maxLength);
        let arrayLength = maxLength;
        let length = 0;

        return this;
    }

    /**
     * Disposes this string.
     */
    method void dispose() {
        do characters.dispose();
        
        return;
    }

    /**
     * Returns the current length of this string.
     */
    method int length() {
        return length;
    }

    /**
     * Returns the character at the j-th location of this string.
     */
    method char charAt(int j) {
        return characters[j];
    }

    /**
     * Sets the character at the j-th location of this string to c.
      * */
    method void setCharAt(int j, char c) {
        if(j > -1 & j < arrayLength) {
            let characters[j] = c;
        }
        
        return;
    }

    /**
     * Appends c to this string's end and returns this string.
     */
    method String appendChar(char c) {
        if(length > -1 & length < arrayLength) {
            do setCharAt(length, c);
        }

        return this;
    }

    /**
     * Erases the last character from this string.
     */
    method void eraseLastChar() {
        if(length > 0) {
            let length = length - 1;
        }

        return;
    }

    /**
     * Returns the integer value of this string, 
     * until a non-digit character is detected.
     */
    method int intValue() {
        var boolean negative;
        var int number;
        var int index;

        let number = 0;
        let index = 0;

        if(length = 0) {
            return number;
        }

        if(characters[0] = MINUS_ASCII) {
            let negative = true;
            let index = index + 1;
        } else {
            let negative = false;
        }

        while((index < length) & String.isDigit(charAt(index))) {
            let number = (number * 10) + String.charToDigit(charAt(index));
            
            let index = index + 1;
        }

        if(negative) {
            return -number;
        }

        return number;
    }

    /**
     * Sets this string to hold a representation of the given value.
     */
    method void setInt(int number) {
        do resetString();

        // If the given number is negative, we want the string to start
        // with a - and then append the absolute value of the given number.
        if(number < 0) {
            do appendChar(MINUS_ASCII);
            let number = -number;
        }

        do appendNumber(number);

        return;
    }

    /**
     * Resets the string
     */
    method void resetString() {
        let length = 0;

        return;
    }

    /**
     * Appends a whole number into the string.
     * If the number is a digit, it appends it.
     * Otherwise, recursively call appendNumber with the given number divided
     * by 10, and append the last digit afterwards.
     */
    method void appendNumber(int number) {
        if(number < 10) {
            do appendChar(String.digitToChar(number));
        } else {
            do appendNumber(number / 10);
            do appendChar(String.digitToChar(number % 10));
        }

        return;
    }


    /**
     * Returns whether the given character is a digit
     */
    function boolean isDigit(char c) {
        return ~(char < ZERO_ASCII) & ~(char > (NINE_ASCII));
    }

    /**
     * Returns ${c} as a digit.
     */
    function int charToDigit(char c) {
        return char - ZERO_ASCII;
    }

    /**
     * Returns ${digit} as a character.
     */
    function char digitToChar(int digit) {
        return ZERO_ASCII + digit;
    }

    /**
     * Returns the new line character.
     */
    function char newLine() {
        return NEW_LINE_ASCII;
    }

    /**
     * Returns the backspace character.
     */
    function char backSpace() {
        return BACKSPACE_ASCII;
    }

    /**
     * Returns the double quote (") character.
     */
    function char doubleQuote() {
        return QUOTES_ASCII;
    }
}
