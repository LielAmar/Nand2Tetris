// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Computer.hdl

/**
 * The HACK computer, including CPU, ROM and RAM.
 * When reset is 0, the program stored in the computer's ROM executes.
 * When reset is 1, the execution of the program restarts. 
 * Thus, to start a program's execution, reset must be pushed "up" (1)
 * and "down" (0). From this point onward the user is at the mercy of 
 * the software. In particular, depending on the program's code, the 
 * screen may show some output and the user may be able to interact 
 * with the computer via the keyboard.
 */

CHIP Computer {
    IN reset;

    PARTS:
    // We load the next instruction from ROM32K using 'pc' - a variable that
    // holds the address of the next instruction.
    ROM32K(address=pc, out=instruction);

    // We then call the CPU to handle the instruction parsing.
    // We pass 'M' (Memory['A']), as well as the instruction and whether to reset.
    // We then get an output, whether we should write it to memory, the address and the next instruction.
    CPU(inM=inM, instruction=instruction, reset=reset, outM=outM, writeM=writeM, addressM=addressM, pc=pc);

    // We forward the CPU output to memory and write it if 'writeM' == '1'.
    // The address in which we write is 'addressM', and the output is the updated value of 'M',
    // which is used for the next CPU call.
    Memory(in=outM, load=writeM, address=addressM, out=inM);
}
