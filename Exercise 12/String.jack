// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array characters;
    field int arrayLength;
    field int length;

    /**
     * constructs a new empty string with a maximum length of maxLength
     * and initial length of 0.
     */
    constructor String new(int maxLength) {
        // Maximum length must be non-negative
        if(maxLength < 0) {
            do Sys.error(14);
            return this;
        }

        if(maxLength = 0) {
            let characters = Array.new(1);
        } else {
            let characters = Array.new(maxLength);
        }
        
        let arrayLength = maxLength;
        let length = 0;

        return this;
    }

    /**
     * Disposes this string.
     */
    method void dispose() {
        do characters.dispose();
        
        return;
    }

    /**
     * Returns the current length of this string.
     */
    method int length() {
        return length;
    }

    /**
     * Returns the character at the j-th location of this string.
     */
    method char charAt(int j) {
        // Error: String index out of bounds
        if(~(j > -1) & ~(j < length)) {
            do Sys.error(15);
        }

        return characters[j];
    }

    /**
     * Sets the character at the j-th location of this string to c.
     */
    method void setCharAt(int j, char c) {
        // Error: String index out of bounds
        if(~(j > -1) & ~(j < length)) {
            do Sys.error(16);
        }

        let characters[j] = c;
        
        return;
    }

    /**
     * Appends c to this string's end and returns this string.
     */
    method String appendChar(char c) {
        // Error: String is full
        if(length = arrayLength) {
            do Sys.error(17);
        }
        
        do setCharAt(length, c);
        let length = length + 1;

        return this;
    }

    /**
     * Erases the last character from this string.
     */
    method void eraseLastChar() {
        // Error: String is empty
        if(length = 0) {
            do Sys.error(18);
        }

        let length = length - 1;
        return;
    }

    /**
     * Returns the integer value of this string, 
     * until a non-digit character is detected.
     */
    method int intValue() {
        var boolean negative;
        var int number;
        var int index;

        let number = 0;
        let index = 0;

        if(length = 0) {
            return number;
        }

        if(characters[0] = 45) {
            let negative = true;
            let index = index + 1;
        } else {
            let negative = false;
        }

        while((index < length) & String.isDigit(charAt(index))) {
            let number = (number * 10) + String.charToDigit(charAt(index));
            
            let index = index + 1;
        }

        if(negative) {
            return -number;
        }

        return number;
    }

    /**
     * Sets this string to hold a representation of the given value.
     */
    method void setInt(int number) {
        do reset();

        // If the given number is negative, we want the string to start
        // with a - and then append the absolute value of the given number.
        if(number < 0) {
            do appendChar(45);
            let number = -number;
        }

        do appendNumber(number);

        return;
    }

    /**
     * Resets the string
     */
    method void reset() {
        let length = 0;

        return;
    }

    /**
     * Appends a whole number into the string.
     * If the number is a digit, it appends it.
     * Otherwise, recursively call appendNumber with the given number divided
     * by 10, and append the last digit afterwards.
     */
    method void appendNumber(int number) {
        var int digit;
        var char character;

        if(length = arrayLength) {
            do Sys.error(19);
        }

        let digit = number - ((number / 10) * 10);
        let character = String.digitToChar(digit);

        if(number < 10) {
            do appendChar(character);
        } else {
            do appendNumber( (number / 10) );
            do appendChar(character);
        }

        return;
    }


    /**
     * Returns whether the given character is a digit
     * Meaning, if the character's ascii is between 48 and 57
     */
    function boolean isDigit(char c) {
        return ~(c < 48) & ~(c > 57);
    }

    /**
     * Returns ${c} as a digit
     * - Assumes the given input is a character between 48 and 57 ascii
     */
    function int charToDigit(char c) {
        return c - 48;
    }

    /**
     * Returns ${digit} as a character
     * - Assumes the given input is a digit between 0 and 9
     */
    function char digitToChar(int digit) {
        return 48 + digit;
    }

    /**
     * Returns the new line character.
     */
    function char newLine() {
        return 128;
    }

    /**
     * Returns the backspace character.
     */
    function char backSpace() {
        return 129;
    }

    /**
     * Returns the double quote (") character.
     */
    function char doubleQuote() {
        return 34;
    }
}
