// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    // An array that starts at the keyboard ram address, allowing access
    // to the value in that address.
    static Array keyboardRegister;
    static Array cursorMap;

    /**
     * Initializes the keyboard register.
     */
    function void init() {
        let keyboardRegister = 24576;
        let cursorMap = Output.getMap(0);

        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return keyboardRegister[0];
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char clickedChar;

        // TODO: dispaly the cursor
        cursorMap

        // Waiting for a key to be pressed
        while(Keyboard.keyPressed() = 0) {}

        // Saving pressed key
        let clickedChar = Keyboard.keyPressed();

        // Waiting for the key to be released
        while(~(Keyboard.keyPressed() = 0)) {}

        // Displaying key into the screen at current cursor location
        do Output.printChar(clickedChar);

        return clickedChar;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String str;
        var char currentChar;

        do Output.printString(message);

        let str = String.new(64);
        let currentChar = Keyboard.readChar();
        
        // Keep on reading until hitting a \n
        
        while(~(currentChar = String.newLine())) {
            if(currentChar = String.backSpace()) {
                do str.eraseLastChar();
            } else {
                do str.appendChar(currentChar);
            }

            let currentChar = Keyboard.readChar();
        }

        return str;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String str;

        let str = Keyboard.readLine(message);

        return line.intValue();
    }
}
