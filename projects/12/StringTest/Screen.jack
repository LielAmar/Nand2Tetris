// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array powersOfTwo;

    static boolean color;

    /**
     * Initializes the Screen.
     */
    function void init() {
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 16384 + 16384;

        // Sets the color to black
        do Screen.setColor(true);

        return;
    }

    /**
     * Erases the entire screen.
     */
    function void clearScreen() {
        var int index;

        let index = 0;

        while(index < 8192) {
            do Memory.poke(16384 + index, 0);

            let index = index + 1;
        }
    
        return;
    }

    /**
     * Sets the current color, to be used for all subsequent drawXXX commands.
     * Black is represented by true, white by false.
     */
    function void setColor(boolean b) {
        let color = b;

        return;
    }

    /**
     * Draws the (x,y) pixel, using the current color.
     */
    function void drawPixel(int x, int y) {
        var int address, row, col;
        var int bitLocation;

        if(x < 0 | y < 0 | x > 511 | y > 255) {
            do Sys.error(7);
        }

        let row = ^^^^^y; // Shifts y 5 times to the left. same as y*32
        let col = ####x;  // Shifts x 4 times to the right. Same as x/16

        let address = 16384 + row + col;

        if(color) {
            // To paint in black, we want to only have the (x & 15)th bit
            // being '1', then using "Logical or" with current value
            // 1010010101101100 [current value]
            // 0000001000000000
            // ----------------
            // 1010011101101100 [new value]
            do Memory.poke(address, Memory.peek(address) | powersOfTwo[(x & 15)]);
        } else {
            // To paint in white, we want to only have the (x & 15)th bit
            // being '0', then using "Logical and" with current value
            // 1010011101101100 [current value]
            // 1111110111111111
            // ----------------
            // 1010010101101100 [new value]
            do Memory.poke(address, Memory.peek(address) & ~powersOfTwo[(x & 15)]);
        }

        return;
    }

    /**
     * Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color.
     */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int x, y;

        let dx = Math.abs(x1 - x2);
        let dy = Math.abs(y1 - y2);

        let x = Math.min(x1, x2);
        let y = Math.min(y1, y2);

        // Horizontal line
        if(dy = 0) {
            do Screen.drawHorizontalLine(x, dx, y1);
            return;
        }

        // Vertical line
        if(dx = 0) {
            do Screen.drawVerticalLine(y, dy, x1);
            return;
        }

        // Swapping x1 and x2, y1 and y2 if needed
        if(x1 > x2) {
            let x1 = x1 + x2;
            let x2 = x1 - x2;
            let x1 = x1 - x2;

            let y1 = y1 + y2;
            let y2 = y1 - y2;
            let y1 = y1 - y2;
        }

        do Screen.drawDiagonalLine(x1, y1, x2, y2);
        return;
    }

    /**
     * Draws an horizontal line
     */
    function void drawHorizontalLine(int startX, int length, int y) {
        var int row;
        var int col;
        var int currentX;
        
        var int address;
        var int bitsToChange;

        let row = ^^^^^y;             // Shifts y 5 times to the left. same as y*32
        let col = ####startX;         // Shifts x 4 times to the right. Same as x/16
        let currentX = (startX & 15); // Remainder. Used to know which bit to edit

        let address = 16384 + row + col;

        // If currentX is not 0, meaning we start in the middle of a byte,
        // we want to start color from the ${currentX} bit.
        // Also, if the length is less than (16 - ${currentX}), we don't want
        // to color all the way to the end of the byte.
        if(~(currentX = 0)) {
            if((currentX + length) < 16) {
                let bitsToChange = powersOfTwo[currentX + length + 1] - 1;
            } else {
                let bitsToChange = -1;
            }

            // We want to change the ${currentX-1} first bits to 0, so we don't
            // edit them.
            // To do that, we take bitsToChange and subtract (2^(currentX - 1) - 1)
            let bitsToChange = bitsToChange - (powersOfTwo[currentX -1] - 1);

            // Coloring the bits
            if(color) {
                do Memory.poke(address, Memory.peek(address) | bitsToChange);
            } else {
                do Memory.poke(address, Memory.peek(address) & ~bitsToChange);
            }

            // Subtracting (16 - (startX & 15)) pixels - the pixels we've edited
            let length = length - (16 - (startX & 15));
            
            // Going to next address
            let address = address + 1;
        }

        // Color all full bytes
        while(length > 15) {
            let bitsToChange = -1;

            // Coloring the bits
            if(color) {
                do Memory.poke(address, Memory.peek(address) | bitsToChange);
            } else {
                do Memory.poke(address, Memory.peek(address) & ~bitsToChange);
            }

            // Subtracting (startX & 15) pixels - the pixels we've edited
            let length = length - 16;
            
            // Going to next address
            let address = address + 1;
        }

        // Color the remaining bits
        if(length > 0) {
            let bitsToChange = powersOfTwo[length + 1] - 1;
        
            // Coloring the bits
            if(color) {
                do Memory.poke(address, Memory.peek(address) | bitsToChange);
            } else {
                do Memory.poke(address, Memory.peek(address) & ~bitsToChange);
            }
        }

        return;
    }

    /**
     * Draws a vertical line
     */
    function void drawVerticalLine(int startY, int length, int x) {
        var int index;

        while(index < (length + 1)) {
            do Screen.drawPixel(x, startY + index);
            let index = index + 1;
        }

        return;
    }

    /**
     * Draws a diagonal line whereas x1 < x2.
     */
    function void drawDiagonalLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int a, b;
        var int yDiffSign;
        var int diff;

        let dx = x2 - x1;
        let dy = y2 - y1;

        let a = 0;
        let b = 0;

        let yDiffSign = dy / Math.abs(dy);
        let diff = 0;

        while(~(a > dx) & (((yDiffSign = 1) & ~(b > dy)) | ((yDiffSign = -1) & ~(b < dy)))) {
            do Screen.drawPixel(x1 + a, y1 + b);

            if(diff < 0) {
                let a = a + 1;
                let diff = diff + (dy * yDiffSign);
            } else {
                let b = b + yDiffSign;
                let diff = diff - dx;
            }
        }

        return;
    }

    /**
     * Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color.
     */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int x, y;
        var int yDir;

        let dx = Math.abs(x1 - x2);
        let dy = Math.abs(y1 - y2);

        let x = Math.min(x1, x2);
        let y = Math.min(y1, y2);

        let yDir = 0;

        while(~(yDir > dy)) {
            do Screen.drawHorizontalLine(x, dx, y + yDir);

            let yDir = yDir + 1;
        }
        
        return;
    }

    /**
     * Draws a filled circle of radius r<=181 around (x,y), using the current color.
     */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;

        var int xDiff;

        if(~(r > -1) & ~(r < 182)) {
            do Sys.error(13);
        }

        let dy = -r;

        while(~(dy > r)) {
            let dx = Math.sqrt((r*r) - (dy*dy));

            do Screen.drawHorizontalLine(x - dx, dx + dx, y + dy);

            let dy = dy + 1;
        }

        return;
    }
}