// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1 the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", .
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // Checking if the regular ALU should be used
     And(a=instruction[8], b=instruction[7], out=useRegular);
     
     // The output of the regular ALU
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], 
          ny=instruction[2], f=instruction[1], no=instruction[0],
          out=regularOut, zr=regularZR, ng=regularNG);

     // =============================================
     // We don't need to check instruction[8]=0 and instruction[7]=1
     // since every other combination of instruction[8] and instruction[7] is
     // undefined, therefore can have the same result as the extended ALU.
     // =============================================

     // The output of the extended ALU
     Mux16(a=y, b=x, sel=instruction[4], out=itemToShift);
     ShiftLeft(in=itemToShift, out=itemShiftedLeft);
     ShiftRight(in=itemToShift, out=itemShiftedRight);
     Mux16(a=itemShiftedRight, b=itemShiftedLeft, sel=instruction[5],
          out=extendedOut);

     // taking care of 'extendedZR' & 'extendedNG'
     Not16(in=extendedOut, out=notExtendedOut, out[15]=notExtendedNG);
     Not16(in=notExtendedOut, out=unused1, out[0..7]=outFirst, out[8..15]=outSecond,
          out[15]=extendedNG);

     Or8Way(in=outFirst, out=or1);  // If we have a single '1' in 1st half
     Or8Way(in=outSecond, out=or2); // If we have a single '1' in 2nd half
     Or(a=or1, b=or2, out=isZr);    // If we have a single '1' in all output
     Mux(a=true, b=false, sel=isZr, out=extendedZR); // if we don't have any 1's, we set extendedZR to be 1


     // Returning the correct output depending on 'useRegular'
     Mux16(a=extendedOut, b=regularOut, sel=useRegular, out=out);
     Mux(a=extendedZR, b=regularZR, sel=useRegular, out=zr);
     Mux(a=extendedNG, b=regularNG, sel=useRegular, out=ng);

}
