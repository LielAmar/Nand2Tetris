// bootstrap code
@256
D=A
@SP
M=D
// call Sys.init 0
@Sys.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init$ret.1)
// function Array.new 0
(Array.new)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE1
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE1
D;JLT
@CODE_START1
0;JMP
(CHECK_SECOND_ITEM_POSITIVE1)
@SP
A=M-1
A=A-1
D=M
@TRUE1
D;JGE
(CODE_START1)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE1
D;JLT
(FALSE1)
@SP
A=M-1
A=A-1
M=0
@END1
0;JMP
(TRUE1)
@SP
A=M-1
A=A-1
M=-1
(END1)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Array.new$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Array.new$IF_FALSE0
0;JMP
// label IF_TRUE0
(Array.new$IF_TRUE0)
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Sys.error$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.2)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label IF_FALSE0
(Array.new$IF_FALSE0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc 1
@Memory.alloc$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Memory.alloc$ret.3)
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Array.dispose 0
(Array.dispose)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
A=M-1
D=M
@THIS
M=D
@SP
M=M-1
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc 1
@Memory.deAlloc$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Memory.deAlloc$ret.4)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Main.main 3
(Main.main)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.poke 2
@Memory.poke$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Memory.poke$ret.1)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_PUSH constant 5001
@5001
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.poke 2
@Memory.poke$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Memory.poke$ret.2)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label WHILE_EXP0
(Main.main$WHILE_EXP0)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE3
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE3
D;JLT
@CODE_START3
0;JMP
(CHECK_SECOND_ITEM_POSITIVE3)
@SP
A=M-1
A=A-1
D=M
@FALSE3
D;JGE
(CODE_START3)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE3
D;JGT
(FALSE3)
@SP
A=M-1
A=A-1
M=0
@END3
0;JMP
(TRUE3)
@SP
A=M-1
A=A-1
M=-1
(END3)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Main.main$WHILE_END0
D;JNE
// C_PUSH constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// call Memory.peek 1
@Memory.peek$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Memory.peek$ret.3)
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// call Memory.peek 1
@Memory.peek$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Memory.peek$ret.4)
// C_POP local 2
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// call Memory.poke 2
@Memory.poke$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Memory.poke$ret.5)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP0
@Main.main$WHILE_EXP0
0;JMP
// label WHILE_END0
(Main.main$WHILE_END0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Math.init 1
(Math.init)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new 1
@Array.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret.1)
// C_POP static 1
@SP
A=M-1
D=M
@MATH.1
M=D
@SP
M=M-1
// C_PUSH constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new 1
@Array.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret.2)
// C_POP static 0
@SP
A=M-1
D=M
@MATH.0
M=D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label WHILE_EXP0
(Math.init$WHILE_EXP0)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE13
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE13
D;JLT
@CODE_START13
0;JMP
(CHECK_SECOND_ITEM_POSITIVE13)
@SP
A=M-1
A=A-1
D=M
@FALSE13
D;JGE
(CODE_START13)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE13
D;JGT
(FALSE13)
@SP
A=M-1
A=A-1
M=0
@END13
0;JMP
(TRUE13)
@SP
A=M-1
A=A-1
M=-1
(END13)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.init$WHILE_END0
D;JNE
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP0
@Math.init$WHILE_EXP0
0;JMP
// label WHILE_END0
(Math.init$WHILE_END0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Math.abs 0
(Math.abs)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE22
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE22
D;JLT
@CODE_START22
0;JMP
(CHECK_SECOND_ITEM_POSITIVE22)
@SP
A=M-1
A=A-1
D=M
@FALSE22
D;JGE
(CODE_START22)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE22
D;JGT
(FALSE22)
@SP
A=M-1
A=A-1
M=0
@END22
0;JMP
(TRUE22)
@SP
A=M-1
A=A-1
M=-1
(END22)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.abs$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.abs$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.abs$IF_TRUE0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE0
(Math.abs$IF_FALSE0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Math.multiply 5
(Math.multiply)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE24
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE24
D;JLT
@CODE_START24
0;JMP
(CHECK_SECOND_ITEM_POSITIVE24)
@SP
A=M-1
A=A-1
D=M
@FALSE24
D;JGE
(CODE_START24)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE24
D;JGT
(FALSE24)
@SP
A=M-1
A=A-1
M=0
@END24
0;JMP
(TRUE24)
@SP
A=M-1
A=A-1
M=-1
(END24)
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE25
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE25
D;JLT
@CODE_START25
0;JMP
(CHECK_SECOND_ITEM_POSITIVE25)
@SP
A=M-1
A=A-1
D=M
@TRUE25
D;JGE
(CODE_START25)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE25
D;JLT
(FALSE25)
@SP
A=M-1
A=A-1
M=0
@END25
0;JMP
(TRUE25)
@SP
A=M-1
A=A-1
M=-1
(END25)
@SP
M=M-1
// and
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=D&M
@SP
M=M-1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE27
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE27
D;JLT
@CODE_START27
0;JMP
(CHECK_SECOND_ITEM_POSITIVE27)
@SP
A=M-1
A=A-1
D=M
@TRUE27
D;JGE
(CODE_START27)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE27
D;JLT
(FALSE27)
@SP
A=M-1
A=A-1
M=0
@END27
0;JMP
(TRUE27)
@SP
A=M-1
A=A-1
M=-1
(END27)
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE28
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE28
D;JLT
@CODE_START28
0;JMP
(CHECK_SECOND_ITEM_POSITIVE28)
@SP
A=M-1
A=A-1
D=M
@FALSE28
D;JGE
(CODE_START28)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE28
D;JGT
(FALSE28)
@SP
A=M-1
A=A-1
M=0
@END28
0;JMP
(TRUE28)
@SP
A=M-1
A=A-1
M=-1
(END28)
@SP
M=M-1
// and
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=D&M
@SP
M=M-1
// or
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=D|M
@SP
M=M-1
// C_POP local 4
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs 1
@Math.abs$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret.3)
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs 1
@Math.abs$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret.4)
// C_POP argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE31
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE31
D;JLT
@CODE_START31
0;JMP
(CHECK_SECOND_ITEM_POSITIVE31)
@SP
A=M-1
A=A-1
D=M
@FALSE31
D;JGE
(CODE_START31)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE31
D;JGT
(FALSE31)
@SP
A=M-1
A=A-1
M=0
@END31
0;JMP
(TRUE31)
@SP
A=M-1
A=A-1
M=-1
(END31)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.multiply$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.multiply$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.multiply$IF_TRUE0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE0
(Math.multiply$IF_FALSE0)
// label WHILE_EXP0
(Math.multiply$WHILE_EXP0)
// C_PUSH local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE32
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE32
D;JLT
@CODE_START32
0;JMP
(CHECK_SECOND_ITEM_POSITIVE32)
@SP
A=M-1
A=A-1
D=M
@FALSE32
D;JGE
(CODE_START32)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE32
D;JGT
(FALSE32)
@SP
A=M-1
A=A-1
M=0
@END32
0;JMP
(TRUE32)
@SP
A=M-1
A=A-1
M=-1
(END32)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.multiply$WHILE_END0
D;JNE
// C_PUSH local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=D&M
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE36
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE36
D;JLT
@CODE_START36
0;JMP
(CHECK_SECOND_ITEM_POSITIVE36)
@SP
A=M-1
A=A-1
D=M
@TRUE36
D;JGE
(CODE_START36)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE36
D;JLT
(FALSE36)
@SP
A=M-1
A=A-1
M=0
@END36
0;JMP
(TRUE36)
@SP
A=M-1
A=A-1
M=-1
(END36)
@SP
M=M-1
// if-goto IF_TRUE1
@SP
A=M-1
D=M
@SP
M=M-1
@Math.multiply$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Math.multiply$IF_FALSE1
0;JMP
// label IF_TRUE1
(Math.multiply$IF_TRUE1)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 2
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE1
(Math.multiply$IF_FALSE1)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP0
@Math.multiply$WHILE_EXP0
0;JMP
// label WHILE_END0
(Math.multiply$WHILE_END0)
// C_PUSH local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// if-goto IF_TRUE2
@SP
A=M-1
D=M
@SP
M=M-1
@Math.multiply$IF_TRUE2
D;JNE
// goto IF_FALSE2
@Math.multiply$IF_FALSE2
0;JMP
// label IF_TRUE2
(Math.multiply$IF_TRUE2)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE2
(Math.multiply$IF_FALSE2)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Math.divide 4
(Math.divide)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=M-D
@TRUE43
D;JEQ
(FALSE43)
@SP
A=M-1
A=A-1
M=0
@END43
0;JMP
(TRUE43)
@SP
A=M-1
A=A-1
M=-1
(END43)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.divide$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.divide$IF_TRUE0)
// C_PUSH constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Sys.error$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.5)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label IF_FALSE0
(Math.divide$IF_FALSE0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE44
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE44
D;JLT
@CODE_START44
0;JMP
(CHECK_SECOND_ITEM_POSITIVE44)
@SP
A=M-1
A=A-1
D=M
@FALSE44
D;JGE
(CODE_START44)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE44
D;JGT
(FALSE44)
@SP
A=M-1
A=A-1
M=0
@END44
0;JMP
(TRUE44)
@SP
A=M-1
A=A-1
M=-1
(END44)
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE45
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE45
D;JLT
@CODE_START45
0;JMP
(CHECK_SECOND_ITEM_POSITIVE45)
@SP
A=M-1
A=A-1
D=M
@TRUE45
D;JGE
(CODE_START45)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE45
D;JLT
(FALSE45)
@SP
A=M-1
A=A-1
M=0
@END45
0;JMP
(TRUE45)
@SP
A=M-1
A=A-1
M=-1
(END45)
@SP
M=M-1
// and
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=D&M
@SP
M=M-1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE47
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE47
D;JLT
@CODE_START47
0;JMP
(CHECK_SECOND_ITEM_POSITIVE47)
@SP
A=M-1
A=A-1
D=M
@TRUE47
D;JGE
(CODE_START47)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE47
D;JLT
(FALSE47)
@SP
A=M-1
A=A-1
M=0
@END47
0;JMP
(TRUE47)
@SP
A=M-1
A=A-1
M=-1
(END47)
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE48
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE48
D;JLT
@CODE_START48
0;JMP
(CHECK_SECOND_ITEM_POSITIVE48)
@SP
A=M-1
A=A-1
D=M
@FALSE48
D;JGE
(CODE_START48)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE48
D;JGT
(FALSE48)
@SP
A=M-1
A=A-1
M=0
@END48
0;JMP
(TRUE48)
@SP
A=M-1
A=A-1
M=-1
(END48)
@SP
M=M-1
// and
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=D&M
@SP
M=M-1
// or
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=D|M
@SP
M=M-1
// C_POP local 2
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs 1
@Math.abs$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret.6)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs 1
@Math.abs$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret.7)
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label WHILE_EXP0
(Math.divide$WHILE_EXP0)
// C_PUSH local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$WHILE_END0
D;JNE
// C_PUSH constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE57
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE57
D;JLT
@CODE_START57
0;JMP
(CHECK_SECOND_ITEM_POSITIVE57)
@SP
A=M-1
A=A-1
D=M
@FALSE57
D;JGE
(CODE_START57)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE57
D;JGT
(FALSE57)
@SP
A=M-1
A=A-1
M=0
@END57
0;JMP
(TRUE57)
@SP
A=M-1
A=A-1
M=-1
(END57)
@SP
M=M-1
// C_POP local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE1
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Math.divide$IF_FALSE1
0;JMP
// label IF_TRUE1
(Math.divide$IF_TRUE1)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE66
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE66
D;JLT
@CODE_START66
0;JMP
(CHECK_SECOND_ITEM_POSITIVE66)
@SP
A=M-1
A=A-1
D=M
@TRUE66
D;JGE
(CODE_START66)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE66
D;JLT
(FALSE66)
@SP
A=M-1
A=A-1
M=0
@END66
0;JMP
(TRUE66)
@SP
A=M-1
A=A-1
M=-1
(END66)
@SP
M=M-1
// C_POP local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE2
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE2
D;JNE
// goto IF_FALSE2
@Math.divide$IF_FALSE2
0;JMP
// label IF_TRUE2
(Math.divide$IF_TRUE2)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE2
(Math.divide$IF_FALSE2)
// label IF_FALSE1
(Math.divide$IF_FALSE1)
// goto WHILE_EXP0
@Math.divide$WHILE_EXP0
0;JMP
// label WHILE_END0
(Math.divide$WHILE_END0)
// label WHILE_EXP1
(Math.divide$WHILE_EXP1)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE70
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE70
D;JLT
@CODE_START70
0;JMP
(CHECK_SECOND_ITEM_POSITIVE70)
@SP
A=M-1
A=A-1
D=M
@TRUE70
D;JGE
(CODE_START70)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE70
D;JLT
(FALSE70)
@SP
A=M-1
A=A-1
M=0
@END70
0;JMP
(TRUE70)
@SP
A=M-1
A=A-1
M=-1
(END70)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$WHILE_END1
D;JNE
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE73
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE73
D;JLT
@CODE_START73
0;JMP
(CHECK_SECOND_ITEM_POSITIVE73)
@SP
A=M-1
A=A-1
D=M
@TRUE73
D;JGE
(CODE_START73)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE73
D;JLT
(FALSE73)
@SP
A=M-1
A=A-1
M=0
@END73
0;JMP
(TRUE73)
@SP
A=M-1
A=A-1
M=-1
(END73)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE3
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE3
D;JNE
// goto IF_FALSE3
@Math.divide$IF_FALSE3
0;JMP
// label IF_TRUE3
(Math.divide$IF_TRUE3)
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE3
(Math.divide$IF_FALSE3)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP1
@Math.divide$WHILE_EXP1
0;JMP
// label WHILE_END1
(Math.divide$WHILE_END1)
// C_PUSH local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// if-goto IF_TRUE4
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE4
D;JNE
// goto IF_FALSE4
@Math.divide$IF_FALSE4
0;JMP
// label IF_TRUE4
(Math.divide$IF_TRUE4)
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE4
(Math.divide$IF_FALSE4)
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Math.sqrt 2
(Math.sqrt)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE81
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE81
D;JLT
@CODE_START81
0;JMP
(CHECK_SECOND_ITEM_POSITIVE81)
@SP
A=M-1
A=A-1
D=M
@FALSE81
D;JGE
(CODE_START81)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE81
D;JGT
(FALSE81)
@SP
A=M-1
A=A-1
M=0
@END81
0;JMP
(TRUE81)
@SP
A=M-1
A=A-1
M=-1
(END81)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.sqrt$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.sqrt$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.sqrt$IF_TRUE0)
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Sys.error$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.8)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label IF_FALSE0
(Math.sqrt$IF_FALSE0)
// C_PUSH constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label WHILE_EXP0
(Math.sqrt$WHILE_EXP0)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE83
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE83
D;JLT
@CODE_START83
0;JMP
(CHECK_SECOND_ITEM_POSITIVE83)
@SP
A=M-1
A=A-1
D=M
@TRUE83
D;JGE
(CODE_START83)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE83
D;JLT
(FALSE83)
@SP
A=M-1
A=A-1
M=0
@END83
0;JMP
(TRUE83)
@SP
A=M-1
A=A-1
M=-1
(END83)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.sqrt$WHILE_END0
D;JNE
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// call Math.multiply 2
@Math.multiply$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.9)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE89
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE89
D;JLT
@CODE_START89
0;JMP
(CHECK_SECOND_ITEM_POSITIVE89)
@SP
A=M-1
A=A-1
D=M
@TRUE89
D;JGE
(CODE_START89)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE89
D;JLT
(FALSE89)
@SP
A=M-1
A=A-1
M=0
@END89
0;JMP
(TRUE89)
@SP
A=M-1
A=A-1
M=-1
(END89)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE1
@SP
A=M-1
D=M
@SP
M=M-1
@Math.sqrt$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Math.sqrt$IF_FALSE1
0;JMP
// label IF_TRUE1
(Math.sqrt$IF_TRUE1)
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE1
(Math.sqrt$IF_FALSE1)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP0
@Math.sqrt$WHILE_EXP0
0;JMP
// label WHILE_END0
(Math.sqrt$WHILE_END0)
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Math.max 0
(Math.max)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE94
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE94
D;JLT
@CODE_START94
0;JMP
(CHECK_SECOND_ITEM_POSITIVE94)
@SP
A=M-1
A=A-1
D=M
@TRUE94
D;JGE
(CODE_START94)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE94
D;JLT
(FALSE94)
@SP
A=M-1
A=A-1
M=0
@END94
0;JMP
(TRUE94)
@SP
A=M-1
A=A-1
M=-1
(END94)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.max$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.max$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.max$IF_TRUE0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE0
(Math.max$IF_FALSE0)
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Math.min 0
(Math.min)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE95
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE95
D;JLT
@CODE_START95
0;JMP
(CHECK_SECOND_ITEM_POSITIVE95)
@SP
A=M-1
A=A-1
D=M
@FALSE95
D;JGE
(CODE_START95)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE95
D;JGT
(FALSE95)
@SP
A=M-1
A=A-1
M=0
@END95
0;JMP
(TRUE95)
@SP
A=M-1
A=A-1
M=-1
(END95)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.min$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.min$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.min$IF_TRUE0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE0
(Math.min$IF_FALSE0)
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Memory.init 0
(Memory.init)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0
@SP
A=M-1
D=M
@MEMORY.0
M=D
@SP
M=M-1
// C_PUSH constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MEMORY.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 14334
@14334
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 2049
@2049
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MEMORY.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 2050
@2050
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Memory.peek 0
(Memory.peek)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MEMORY.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Memory.poke 0
(Memory.poke)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MEMORY.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Memory.alloc 2
(Memory.alloc)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE100
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE100
D;JLT
@CODE_START100
0;JMP
(CHECK_SECOND_ITEM_POSITIVE100)
@SP
A=M-1
A=A-1
D=M
@FALSE100
D;JGE
(CODE_START100)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE100
D;JGT
(FALSE100)
@SP
A=M-1
A=A-1
M=0
@END100
0;JMP
(TRUE100)
@SP
A=M-1
A=A-1
M=-1
(END100)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Memory.alloc$IF_FALSE0
0;JMP
// label IF_TRUE0
(Memory.alloc$IF_TRUE0)
// C_PUSH constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Sys.error$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.1)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label IF_FALSE0
(Memory.alloc$IF_FALSE0)
// C_PUSH constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label WHILE_EXP0
(Memory.alloc$WHILE_EXP0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE102
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE102
D;JLT
@CODE_START102
0;JMP
(CHECK_SECOND_ITEM_POSITIVE102)
@SP
A=M-1
A=A-1
D=M
@FALSE102
D;JGE
(CODE_START102)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE102
D;JGT
(FALSE102)
@SP
A=M-1
A=A-1
M=0
@END102
0;JMP
(TRUE102)
@SP
A=M-1
A=A-1
M=-1
(END102)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$WHILE_END0
D;JNE
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP0
@Memory.alloc$WHILE_EXP0
0;JMP
// label WHILE_END0
(Memory.alloc$WHILE_END0)
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 16379
@16379
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE106
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE106
D;JLT
@CODE_START106
0;JMP
(CHECK_SECOND_ITEM_POSITIVE106)
@SP
A=M-1
A=A-1
D=M
@TRUE106
D;JGE
(CODE_START106)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE106
D;JLT
(FALSE106)
@SP
A=M-1
A=A-1
M=0
@END106
0;JMP
(TRUE106)
@SP
A=M-1
A=A-1
M=-1
(END106)
@SP
M=M-1
// if-goto IF_TRUE1
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Memory.alloc$IF_FALSE1
0;JMP
// label IF_TRUE1
(Memory.alloc$IF_TRUE1)
// C_PUSH constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Sys.error$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.2)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label IF_FALSE1
(Memory.alloc$IF_FALSE1)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE109
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE109
D;JLT
@CODE_START109
0;JMP
(CHECK_SECOND_ITEM_POSITIVE109)
@SP
A=M-1
A=A-1
D=M
@TRUE109
D;JGE
(CODE_START109)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE109
D;JLT
(FALSE109)
@SP
A=M-1
A=A-1
M=0
@END109
0;JMP
(TRUE109)
@SP
A=M-1
A=A-1
M=-1
(END109)
@SP
M=M-1
// if-goto IF_TRUE2
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$IF_TRUE2
D;JNE
// goto IF_FALSE2
@Memory.alloc$IF_FALSE2
0;JMP
// label IF_TRUE2
(Memory.alloc$IF_TRUE2)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// eq
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=M-D
@TRUE117
D;JEQ
(FALSE117)
@SP
A=M-1
A=A-1
M=0
@END117
0;JMP
(TRUE117)
@SP
A=M-1
A=A-1
M=-1
(END117)
@SP
M=M-1
// if-goto IF_TRUE3
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$IF_TRUE3
D;JNE
// goto IF_FALSE3
@Memory.alloc$IF_FALSE3
0;JMP
// label IF_TRUE3
(Memory.alloc$IF_TRUE3)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto IF_END3
@Memory.alloc$IF_END3
0;JMP
// label IF_FALSE3
(Memory.alloc$IF_FALSE3)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_END3
(Memory.alloc$IF_END3)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE2
(Memory.alloc$IF_FALSE2)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Memory.deAlloc 2
(Memory.deAlloc)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=M-D
@TRUE133
D;JEQ
(FALSE133)
@SP
A=M-1
A=A-1
M=0
@END133
0;JMP
(TRUE133)
@SP
A=M-1
A=A-1
M=-1
(END133)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.deAlloc$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Memory.deAlloc$IF_FALSE0
0;JMP
// label IF_TRUE0
(Memory.deAlloc$IF_TRUE0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto IF_END0
@Memory.deAlloc$IF_END0
0;JMP
// label IF_FALSE0
(Memory.deAlloc$IF_FALSE0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// eq
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=M-D
@TRUE145
D;JEQ
(FALSE145)
@SP
A=M-1
A=A-1
M=0
@END145
0;JMP
(TRUE145)
@SP
A=M-1
A=A-1
M=-1
(END145)
@SP
M=M-1
// if-goto IF_TRUE1
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.deAlloc$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Memory.deAlloc$IF_FALSE1
0;JMP
// label IF_TRUE1
(Memory.deAlloc$IF_TRUE1)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto IF_END1
@Memory.deAlloc$IF_END1
0;JMP
// label IF_FALSE1
(Memory.deAlloc$IF_FALSE1)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_END1
(Memory.deAlloc$IF_END1)
// label IF_END0
(Memory.deAlloc$IF_END0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Sys.init 0
(Sys.init)
// call Memory.init 0
@Memory.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.init
0;JMP
(Memory.init$ret.1)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// call Math.init 0
@Math.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.init
0;JMP
(Math.init$ret.2)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// call Main.main 0
@Main.main$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.main
0;JMP
(Main.main$ret.3)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label WHILE_EXP0
(Sys.init$WHILE_EXP0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.init$WHILE_END0
D;JNE
// goto WHILE_EXP0
@Sys.init$WHILE_EXP0
0;JMP
// label WHILE_END0
(Sys.init$WHILE_END0)
// function Sys.halt 0
(Sys.halt)
// label WHILE_EXP0
(Sys.halt$WHILE_EXP0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.halt$WHILE_END0
D;JNE
// goto WHILE_EXP0
@Sys.halt$WHILE_EXP0
0;JMP
// label WHILE_END0
(Sys.halt$WHILE_END0)
// function Sys.wait 1
(Sys.wait)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE154
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE154
D;JLT
@CODE_START154
0;JMP
(CHECK_SECOND_ITEM_POSITIVE154)
@SP
A=M-1
A=A-1
D=M
@FALSE154
D;JGE
(CODE_START154)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE154
D;JGT
(FALSE154)
@SP
A=M-1
A=A-1
M=0
@END154
0;JMP
(TRUE154)
@SP
A=M-1
A=A-1
M=-1
(END154)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.wait$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Sys.wait$IF_FALSE0
0;JMP
// label IF_TRUE0
(Sys.wait$IF_TRUE0)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Sys.error$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.4)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label IF_FALSE0
(Sys.wait$IF_FALSE0)
// label WHILE_EXP0
(Sys.wait$WHILE_EXP0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE155
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE155
D;JLT
@CODE_START155
0;JMP
(CHECK_SECOND_ITEM_POSITIVE155)
@SP
A=M-1
A=A-1
D=M
@TRUE155
D;JGE
(CODE_START155)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE155
D;JLT
(FALSE155)
@SP
A=M-1
A=A-1
M=0
@END155
0;JMP
(TRUE155)
@SP
A=M-1
A=A-1
M=-1
(END155)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.wait$WHILE_END0
D;JNE
// C_PUSH constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label WHILE_EXP1
(Sys.wait$WHILE_EXP1)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE157
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE157
D;JLT
@CODE_START157
0;JMP
(CHECK_SECOND_ITEM_POSITIVE157)
@SP
A=M-1
A=A-1
D=M
@TRUE157
D;JGE
(CODE_START157)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE157
D;JLT
(FALSE157)
@SP
A=M-1
A=A-1
M=0
@END157
0;JMP
(TRUE157)
@SP
A=M-1
A=A-1
M=-1
(END157)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.wait$WHILE_END1
D;JNE
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP1
@Sys.wait$WHILE_EXP1
0;JMP
// label WHILE_END1
(Sys.wait$WHILE_END1)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP0
@Sys.wait$WHILE_EXP0
0;JMP
// label WHILE_END0
(Sys.wait$WHILE_END0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Sys.error 0
(Sys.error)
// label WHILE_EXP0
(Sys.error$WHILE_EXP0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.error$WHILE_END0
D;JNE
// goto WHILE_EXP0
@Sys.error$WHILE_EXP0
0;JMP
// label WHILE_END0
(Sys.error$WHILE_END0)
