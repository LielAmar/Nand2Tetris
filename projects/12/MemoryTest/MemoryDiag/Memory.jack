// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    /*
        We're working in this scheme:
        - We use the variable memory to get the value at ANY address in
          our memory, whether it's in the stack or in the heap.
    */

    // Pointer to the ram
    static Array memory;

    // Address of the first free node
    static int free;

    /**
     * Initializes the class.
     */
    function void init() {
        let memory = 0;

        // Initializes the pointer to the first node to point at the start of
        // the heap: 2048
        let free = 2048;

        let memory[free] = 16382 - 2048 + 1; /* The heap size */
        let memory[free + 1] = 0;            /* Pointer to next node */

        return;
    }

    /**
     * Returns the RAM value at the given address.
     */
    function int peek(int address) {
        return memory[address];
    }

    /**
     * Sets the RAM value at the given address to the given value.
     */
    function void poke(int address, int value) {
        let memory[address] = value;

        return;
    }

    /**
     * Finds an available RAM block of the given size and returns
     * a reference to its base address. Assume size > 0.
     */
    function int alloc(int size) {
        var int currentNodeAddress;
        var int previousNodeAddress;
        var int blockAddress;

        let currentNodeAddress = free;
        let previousNodeAddress = -1;

        // Looping over all nodes until finding one that suits one of 3 cases:
        // 1. size < (node's size - 2)
        // 2. size = (node's size - 2)
        // 3. size = (node's size - 1)
        // and handling each case accordingly
        while(~(currentNodeAddress = 0)) {
            if(size < (memory[currentNodeAddress] - 2)) {
                // Updates the node's size
                let memory[currentNodeAddress] = memory[currentNodeAddress] - (1 + size);

                // Calculating the address of the block to return
                let blockAddress = currentNodeAddress + memory[currentNodeAddress] + 2;
                
                // Setting the size of the returned block
                let memory[blockAddress - 1] = size + 1;

                return blockAddress;
            }

            if(size = (memory[currentNodeAddress] - 1)) {
                // If previous node is not null, make it point to the next node
                // instead of the current one
                if(~(previousNodeAddress = -1)) {
                    let memory[previousNodeAddress + 1] = memory[currentNodeAddress + 1];
                } else {
                    let free = memory[currentNodeAddress + 1];
                }

                // Calculating the address of the block to return
                let blockAddress = (currentNodeAddress + 1);

                return blockAddress;
            }

            if(size = (memory[currentNodeAddress] - 2)) {
                // If previous node is not null, make it point to the next node
                // instead of the current one
                if(~(previousNodeAddress = -1)) {
                    let memory[previousNodeAddress + 1] = memory[currentNodeAddress + 1];
                } else {
                    let free = memory[currentNodeAddress + 1];
                }

                // Calculating the address of the block to return
                let blockAddress = (currentNodeAddress + 2);

                // Setting the size of the returned block
                let memory[blockAddress - 1] = size + 1;

                return blockAddress;
            }

            // Update current node to next node, and save previous node
            let previousNodeAddress = currentNodeAddress;
            let currentNodeAddress = memory[currentNodeAddress + 1];
        }
        
        return -1;
    }

    /**
     * De-allocates the given object (cast as an array) by making
     * it available for future allocations.
     */
    function void deAlloc(Array object) {
        var int oldFree;

        let oldFree = free;
        let free = object - 1;
        let memory[object] = oldFree;

        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        
        return 0;
    }
}
