<class>
  <keyword> class </keyword>
  <identifier> Shcortz </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Terrain </identifier>
    <identifier> terry </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Array </identifier>
    <identifier> tanks </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> playerNum </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Tank </identifier>
    <identifier> currentTank </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> leftLiving </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> Shcortz </identifier>
    <identifier> new </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier> String </identifier>
        <identifier> pname </identifier>
        <symbol> , </symbol>
        <identifier> message </identifier>
        <symbol> , </symbol>
        <identifier> blank </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> , </symbol>
        <identifier> offset </identifier>
        <symbol> , </symbol>
        <identifier> base </identifier>
        <symbol> , </symbol>
        <identifier> coX </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> terry </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Terrain </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 7 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 28 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> message </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <stringConstant> SHCORTZ </stringConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> message </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> message </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 13 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 19 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> message </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <stringConstant> The ultimate fighting game </stringConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> message </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> message </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 17 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 18 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> message </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <stringConstant> Made for you by: Omer and Oded </stringConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> message </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> message </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> message </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <stringConstant> Enter a no. (1-1000):  </stringConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 22 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> terry </identifier>
          <symbol> . </symbol>
          <identifier> seed </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> Keyboard </identifier>
                <symbol> . </symbol>
                <identifier> readInt </identifier>
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> message </identifier>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> message </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> blank </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <stringConstant>                                              </stringConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 22 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> blank </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> message </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <stringConstant> How many players (2-8)?  </stringConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> playerNum </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> playerNum </identifier>
                </term>
                <symbol> &lt; </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> | </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> playerNum </identifier>
                </term>
                <symbol> &gt; </symbol>
                <term>
                  <integerConstant> 8 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> moveCursor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 22 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> playerNum </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> Keyboard </identifier>
                  <symbol> . </symbol>
                  <identifier> readInt </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <identifier> message </identifier>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> moveCursor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 22 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> printString </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> blank </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> leftLiving </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> playerNum </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> message </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> base </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Math </identifier>
              <symbol> . </symbol>
              <identifier> divide </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 512 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> playerNum </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> tanks </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Array </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> playerNum </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> message </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <stringConstant> Enter player's name:  </stringConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> i </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> playerNum </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> offset </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> base </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <whileStatement>
              <keyword> while </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ~ </symbol>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier> offset </identifier>
                      </term>
                      <symbol> &lt; </symbol>
                      <term>
                        <identifier> base </identifier>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> offset </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> terry </identifier>
                      <symbol> . </symbol>
                      <identifier> pickValue </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> coX </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> Math </identifier>
                      <symbol> . </symbol>
                      <identifier> multiply </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> Math </identifier>
                            <symbol> . </symbol>
                            <identifier> abs </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                              <expression>
                                <term>
                                  <integerConstant> 1 </integerConstant>
                                </term>
                                <symbol> - </symbol>
                                <term>
                                  <identifier> i </identifier>
                                </term>
                              </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> base </identifier>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <identifier> offset </identifier>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> coX </identifier>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                          <integerConstant> 10 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> | </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> coX </identifier>
                        </term>
                        <symbol> &gt; </symbol>
                        <term>
                          <integerConstant> 502 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> offset </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> base </identifier>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </whileStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> moveCursor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 22 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> pname </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> Keyboard </identifier>
                  <symbol> . </symbol>
                  <identifier> readLine </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <identifier> message </identifier>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> moveCursor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 22 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> printString </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> blank </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> tanks </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
              </expression>
              <symbol> ] </symbol>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> Tank </identifier>
                  <symbol> . </symbol>
                  <identifier> new </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <identifier> pname </identifier>
                      </term>
                    </expression>
                    <symbol> , </symbol>
                    <expression>
                      <term>
                        <identifier> coX </identifier>
                      </term>
                    </expression>
                    <symbol> , </symbol>
                    <expression>
                      <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> message </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> blank </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> clearScreen </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> this </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> playerNum </identifier>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> currentTank </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> tanks </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <identifier> playerNum </identifier>
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> currentTank </identifier>
              <symbol> . </symbol>
              <identifier> dispose </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> playerNum </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> playerNum </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> terry </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Memory </identifier>
          <symbol> . </symbol>
          <identifier> deAlloc </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> this </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> update </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> xBlow </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> size </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> , </symbol>
        <identifier> damage </identifier>
        <symbol> , </symbol>
        <identifier> life </identifier>
        <symbol> , </symbol>
        <identifier> x </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <identifier> Tank </identifier>
        <identifier> t </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier> playerNum </identifier>
                  </term>
                  <symbol> &gt; </symbol>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <returnStatement>
              <keyword> return </keyword>
              <symbol> ; </symbol>
            </returnStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> i </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> playerNum </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> t </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> tanks </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <identifier> i </identifier>
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> t </identifier>
                  <symbol> . </symbol>
                  <identifier> alive </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> t </identifier>
                  <symbol> . </symbol>
                  <identifier> draw </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> x </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> t </identifier>
                      <symbol> . </symbol>
                      <identifier> getX </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> damage </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> Math </identifier>
                      <symbol> . </symbol>
                      <identifier> abs </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> xBlow </identifier>
                          </term>
                          <symbol> - </symbol>
                          <term>
                            <identifier> x </identifier>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> damage </identifier>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> size </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <integerConstant> 5 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> life </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> t </identifier>
                          <symbol> . </symbol>
                          <identifier> update </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                            <expression>
                              <term>
                                <symbol> ( </symbol>
                                <expression>
                                  <term>
                                    <symbol> ( </symbol>
                                    <expression>
                                      <term>
                                        <identifier> size </identifier>
                                      </term>
                                      <symbol> + </symbol>
                                      <term>
                                        <integerConstant> 5 </integerConstant>
                                      </term>
                                    </expression>
                                    <symbol> ) </symbol>
                                  </term>
                                  <symbol> - </symbol>
                                  <term>
                                    <identifier> damage </identifier>
                                  </term>
                                </expression>
                                <symbol> ) </symbol>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> terry </identifier>
                                <symbol> . </symbol>
                                <identifier> getHeight </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                  <expression>
                                    <term>
                                      <identifier> x </identifier>
                                    </term>
                                  </expression>
                                </expressionList>
                                <symbol> ) </symbol>
                              </term>
                            </expression>
                          </expressionList>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> life </identifier>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <doStatement>
                          <keyword> do </keyword>
                          <identifier> terry </identifier>
                          <symbol> . </symbol>
                          <identifier> explosion </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                            <expression>
                              <term>
                                <identifier> x </identifier>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <integerConstant> 9 </integerConstant>
                              </term>
                            </expression>
                          </expressionList>
                          <symbol> ) </symbol>
                          <symbol> ; </symbol>
                        </doStatement>
                        <doStatement>
                          <keyword> do </keyword>
                          <identifier> t </identifier>
                          <symbol> . </symbol>
                          <identifier> lifeAndDeath </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                            <expression>
                              <term>
                                <keyword> false </keyword>
                              </term>
                            </expression>
                          </expressionList>
                          <symbol> ) </symbol>
                          <symbol> ; </symbol>
                        </doStatement>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> leftLiving </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <identifier> leftLiving </identifier>
                            </term>
                            <symbol> - </symbol>
                            <term>
                              <integerConstant> 1 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                        <doStatement>
                          <keyword> do </keyword>
                          <identifier> t </identifier>
                          <symbol> . </symbol>
                          <identifier> erase </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                          </expressionList>
                          <symbol> ) </symbol>
                          <symbol> ; </symbol>
                        </doStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> run </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> char </keyword>
        <identifier> key </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <identifier> exit </identifier>
        <symbol> , </symbol>
        <identifier> blow </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> size </identifier>
        <symbol> , </symbol>
        <identifier> xBlow </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> , </symbol>
        <identifier> j </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <identifier> Bullet </identifier>
        <identifier> bully </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <identifier> String </identifier>
        <identifier> message </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> terry </identifier>
          <symbol> . </symbol>
          <identifier> initTerrain </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> i </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> playerNum </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> currentTank </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> tanks </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <identifier> i </identifier>
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> currentTank </identifier>
              <symbol> . </symbol>
              <identifier> setY </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> terry </identifier>
                    <symbol> . </symbol>
                    <identifier> getHeight </identifier>
                    <symbol> ( </symbol>
                    <expressionList>
                      <expression>
                        <term>
                          <identifier> currentTank </identifier>
                          <symbol> . </symbol>
                          <identifier> getX </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                          </expressionList>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                    </expressionList>
                    <symbol> ) </symbol>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> currentTank </identifier>
              <symbol> . </symbol>
              <identifier> draw </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> size </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> i </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> playerNum </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> exit </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <keyword> false </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> message </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <stringConstant> Bullet size:  </stringConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 22 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 50 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> message </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> message </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> currentTank </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> tanks </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ] </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> currentTank </identifier>
          <symbol> . </symbol>
          <identifier> myTurn </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <identifier> exit </identifier>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> key </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> Keyboard </identifier>
                  <symbol> . </symbol>
                  <identifier> keyPressed </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 81 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> exit </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <keyword> true </keyword>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> Screen </identifier>
                  <symbol> . </symbol>
                  <identifier> clearScreen </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 32 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> bully </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> currentTank </identifier>
                      <symbol> . </symbol>
                      <identifier> shoot </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> Math </identifier>
                            <symbol> . </symbol>
                            <identifier> multiply </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                              <expression>
                                <term>
                                  <identifier> size </identifier>
                                </term>
                              </expression>
                              <symbol> , </symbol>
                              <expression>
                                <term>
                                  <integerConstant> 3 </integerConstant>
                                </term>
                              </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> blow </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <keyword> false </keyword>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                  <keyword> while </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <identifier> blow </identifier>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> xBlow </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> terry </identifier>
                          <symbol> . </symbol>
                          <identifier> collides </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                            <expression>
                              <term>
                                <identifier> bully </identifier>
                                <symbol> . </symbol>
                                <identifier> getX </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                </expressionList>
                                <symbol> ) </symbol>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> bully </identifier>
                                <symbol> . </symbol>
                                <identifier> getY </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                </expressionList>
                                <symbol> ) </symbol>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> bully </identifier>
                                <symbol> . </symbol>
                                <identifier> getNextX </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                </expressionList>
                                <symbol> ) </symbol>
                              </term>
                            </expression>
                            <symbol> , </symbol>
                            <expression>
                              <term>
                                <identifier> bully </identifier>
                                <symbol> . </symbol>
                                <identifier> getNextY </identifier>
                                <symbol> ( </symbol>
                                <expressionList>
                                </expressionList>
                                <symbol> ) </symbol>
                              </term>
                            </expression>
                          </expressionList>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <symbol> ~ </symbol>
                          <term>
                            <symbol> ( </symbol>
                            <expression>
                              <term>
                                <identifier> xBlow </identifier>
                              </term>
                              <symbol> &lt; </symbol>
                              <term>
                                <integerConstant> 0 </integerConstant>
                              </term>
                            </expression>
                            <symbol> ) </symbol>
                          </term>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> blow </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <keyword> true </keyword>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <symbol> ~ </symbol>
                              <term>
                                <identifier> blow </identifier>
                              </term>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                        <symbol> &amp; </symbol>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> bully </identifier>
                              <symbol> . </symbol>
                              <identifier> valid </identifier>
                              <symbol> ( </symbol>
                              <expressionList>
                              </expressionList>
                              <symbol> ) </symbol>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <doStatement>
                          <keyword> do </keyword>
                          <identifier> bully </identifier>
                          <symbol> . </symbol>
                          <identifier> tock </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                          </expressionList>
                          <symbol> ) </symbol>
                          <symbol> ; </symbol>
                        </doStatement>
                      </statements>
                      <symbol> } </symbol>
                      <keyword> else </keyword>
                      <symbol> { </symbol>
                      <statements>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> blow </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <keyword> true </keyword>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                  </statements>
                  <symbol> } </symbol>
                </whileStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> bully </identifier>
                      <symbol> . </symbol>
                      <identifier> valid </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> bully </identifier>
                      <symbol> . </symbol>
                      <identifier> erase </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> terry </identifier>
                      <symbol> . </symbol>
                      <identifier> explosion </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> xBlow </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <identifier> Math </identifier>
                            <symbol> . </symbol>
                            <identifier> multiply </identifier>
                            <symbol> ( </symbol>
                            <expressionList>
                              <expression>
                                <term>
                                  <identifier> size </identifier>
                                </term>
                              </expression>
                              <symbol> , </symbol>
                              <expression>
                                <term>
                                  <integerConstant> 3 </integerConstant>
                                </term>
                              </expression>
                            </expressionList>
                            <symbol> ) </symbol>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> update </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <identifier> xBlow </identifier>
                      </term>
                    </expression>
                    <symbol> , </symbol>
                    <expression>
                      <term>
                        <identifier> Math </identifier>
                        <symbol> . </symbol>
                        <identifier> multiply </identifier>
                        <symbol> ( </symbol>
                        <expressionList>
                          <expression>
                            <term>
                              <identifier> size </identifier>
                            </term>
                          </expression>
                          <symbol> , </symbol>
                          <expression>
                            <term>
                              <integerConstant> 3 </integerConstant>
                            </term>
                          </expression>
                        </expressionList>
                        <symbol> ) </symbol>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> bully </identifier>
                  <symbol> . </symbol>
                  <identifier> dispose </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> currentTank </identifier>
                  <symbol> . </symbol>
                  <identifier> endTurn </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> j </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> leftLiving </identifier>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <whileStatement>
                  <keyword> while </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> j </identifier>
                    </term>
                    <symbol> &gt; </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> i </identifier>
                        </term>
                        <symbol> = </symbol>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> i </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <identifier> playerNum </identifier>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                      <keyword> else </keyword>
                      <symbol> { </symbol>
                      <statements>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> i </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <identifier> i </identifier>
                            </term>
                            <symbol> - </symbol>
                            <term>
                              <integerConstant> 1 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> currentTank </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> tanks </identifier>
                          <symbol> [ </symbol>
                          <expression>
                            <term>
                              <identifier> i </identifier>
                            </term>
                            <symbol> - </symbol>
                            <term>
                              <integerConstant> 1 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ] </symbol>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> currentTank </identifier>
                          <symbol> . </symbol>
                          <identifier> alive </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                          </expressionList>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <doStatement>
                          <keyword> do </keyword>
                          <identifier> currentTank </identifier>
                          <symbol> . </symbol>
                          <identifier> myTurn </identifier>
                          <symbol> ( </symbol>
                          <expressionList>
                          </expressionList>
                          <symbol> ) </symbol>
                          <symbol> ; </symbol>
                        </doStatement>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> j </identifier>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <integerConstant> 0 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                  </statements>
                  <symbol> } </symbol>
                </whileStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> leftLiving </identifier>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <integerConstant> 2 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Screen </identifier>
                      <symbol> . </symbol>
                      <identifier> clearScreen </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Output </identifier>
                      <symbol> . </symbol>
                      <identifier> moveCursor </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <integerConstant> 7 </integerConstant>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <integerConstant> 28 </integerConstant>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Output </identifier>
                      <symbol> . </symbol>
                      <identifier> printString </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <stringConstant> THE END </stringConstant>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <returnStatement>
                      <keyword> return </keyword>
                      <symbol> ; </symbol>
                    </returnStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 49 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> size </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 50 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> size </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 2 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 51 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> size </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 3 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 52 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> size </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 53 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> size </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 131 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> currentTank </identifier>
                  <symbol> . </symbol>
                  <identifier> powerUp </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 133 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> currentTank </identifier>
                  <symbol> . </symbol>
                  <identifier> powerDown </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 130 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> currentTank </identifier>
                  <symbol> . </symbol>
                  <identifier> aimLeft </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 132 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> currentTank </identifier>
                  <symbol> . </symbol>
                  <identifier> aimRight </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> moveCursor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 22 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 62 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> printInt </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> size </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
