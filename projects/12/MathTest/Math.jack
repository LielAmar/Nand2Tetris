// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    
    static Array powersOfTwo;

    static int divisionSum;

    /**
     * Initializes the library.
     */
    function void init() {
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 16384 + 16384;

        return;
    }

    /**
     * Returns the absolute value of x.
     */
    function int abs(int x) {
        if(x > 0) {
            return x;
        }

        return -x;
    }

    /** 
     * Returns the product of x and y. 
     * When a Jack compiler detects the multiplication operator '*' in the 
     * program's code, it handles it by invoking this method. In other words,
     * the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var boolean negative;

        let sum = 0;
        let negative = false;

        // If the result would be negative, remember it
        if(((x > 0) & (y < 0)) | ((x < 0) & (y > 0))) {
            let negative = true;
        }

        // Absoluting x and y for the algorithm
        let x = Math.abs(x);
        let y = Math.abs(y);

        // Going over all y's bits
        while(y > 0) {
            // Adding the current shift of x to the sum     
            if((y & 1) = 1) {
                let sum = sum + x;
            }

            // Shifting x to the left
            // 0000 0100 1011 0110 
            let x = ^x;

            // Shifting y to the right
            // 1000 0010 0101 1011 -> 0100 0001 0010 1101
            let y = #y;
        }
        
        // Returning the result
        if(negative) {
            return -sum;
        }

        return sum;
    }

    /** 
     * Returns the integer part of x/y.
     * When a Jack compiler detects the multiplication operator '/' in the 
     * program's code, it handles it by invoking this method. In other words,
     * the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result;
        var boolean negative;

        // If the result would be negative, remember it
        if(((x > 0) & (y < 0)) | ((x < 0) & (y > 0))) {
            let negative = true;
        }

        let result = Math.divideAbs(Math.abs(x), Math.abs(y));

        if(negative) {
            return -result;
        }

        return result;
    }

    function int divideAbs(int x, int y) {
        var int q;

        if(y > x) {
            let divisionSum = 0;
            return 0;
        }

        let q = Math.divideAbs(x, ^y);

        if((x - divisionSum) < y) {
            return ^q;
        }

        let divisionSum = divisionSum + y;

        return ^q + 1;
    }

    /**
     * Returns the integer part of the square root of x.
     */
    function int sqrt(int x) {
        var int y, ySquared;
        var int temp;
        var int j;

        if(x < 0) {
            do Sys.error(4);
        }

        let y = 0;
        let ySquared = 0;

        let j = 7;

        while(j > -1) {
            // Notice that: (y + 2^j)^2  =  y^2 + y*(2^(j+1)) + 2^(2j)
            // - y*(2^(j+1)) is y shifted left (j+1 times)
            // - 2^(2j) is 2^(j shifted left)

            // Calculating (y + 2^j)^2  =  y^2  +  y2^(j+1) + 2^(2j)
            let temp = ySquared + Math.shiftLeft(y, j + 1) + powersOfTwo[(^j)];
            
            // But we'll make sure that y^2 = prevYSquared
            if((~(temp < 0)) & (~(temp > x))) {
                // Updating y and y squared
                let y = y + powersOfTwo[j];

                let ySquared = temp;
            }

            let j = j - 1;
        }

        return y;
    }

    /**
     * Shifts the given number n times to the left
     */
    function int shiftLeft(int x, int n) {
        while(n > 0) {
            let x = ^x;

            let n = n - 1;
        }

        return x;
    }

    /**
     * Returns the greater number.
     */
    function int max(int a, int b) {
        if(a > b) {
            return a;
        }

        return b;
    }

    /**
     * Returns the smaller number.
     */
    function int min(int a, int b) {
        if(a > b) {
            return b;
        }

        return a;
    }
}
