 /**
	 supplies methods for drawing poylgons of up to 6'th order (hexagons),
	 cars & trucks. All methods receive parameters sx, sy which are assumed
	 to be the current center of the axes system. In addition, a boolean
	 horz is supplied to some of the method, enabling them to swap 
	 the x and y axes for purposes of drawing the same drawing, only
	 vertically instead of horizontally. This was inserted into the RushHourGraphics
	 interface in order to reduce unnecessary repetition of code.	
	 The methods for drawing geometrical primitives have the same general 
	 form of the ones appearing in the Screen class, except for receiving
	 the above parameters.
*/

class RushHourGraphics {

	function void drawLine(boolean horz, int sx, int sy, int x1, int y1, int x2, int y2) {
		if (horz) {
			do Screen.drawLine(sx + x1, sy + y1, sx + x2, sy + y2);
		}
		else {
			do Screen.drawLine(sx + y1, sy + x1, sx + y2, sy + x2);
		}
		return;
	}
  /**
		 receives 4 dots and connects the lines between them.
  */
	function void drawLines4v(boolean horz, int sx, int sy, int x1, int y1, int x2, int y2, 
														int x3, int y3, int x4, int y4) {
		do RushHourGraphics.drawLine(horz, sx, sy, x1, y1, x2, y2);
		do RushHourGraphics.drawLine(horz, sx, sy, x2, y2, x3, y3);
		do RushHourGraphics.drawLine(horz, sx, sy, x3, y3, x4, y4);
		return;
	}													
  /** 
			draws a hexagon using the 6 (x,y) pairs supplied.
  */
	function void drawHexagon(boolean horz, int sx, int sy, int x1, int y1, int x2, int y2, 
														int x3, int y3, int x4, int y4, int x5, int y5, int x6, int y6) {
		do RushHourGraphics.drawLines4v(horz, sx, sy, x1, y1, x2, y2, x3, y3, x4, y4);
		do RushHourGraphics.drawLines4v(horz, sx, sy, x4, y4, x5, y5, x6, y6, x1, y1);
		return;
	}

	/**
	 
	draws a car whose bounding square's top left corner is x,y;
	*/
	function void drawCar(int x, int y, boolean isHorz, boolean color) {
	
	
		if (color) { // drawing => erase seperating line
			do Screen.setColor(false); // erase
			do RushHourGraphics.drawLine(isHorz, x, y, 40, 6, 40, 34);
	  	do Screen.setColor(true);
			do RushHourGraphics.drawHexagon(isHorz,x,y,9,6,60,6,71,11,71,28,60,34,9,34);
			do RushHourGraphics.drawHexagon(isHorz,x,y,12,12,18,8,24,11,24,29,18,32,12,28);
			do RushHourGraphics.drawLines4v(isHorz,x,y,24,11,45,11,45,29,24,29);
			do RushHourGraphics.drawLines4v(isHorz,x,y,18,8,50,8,54,20,50,32);
			do RushHourGraphics.drawLine(isHorz,x,y,45,11,50,8);
			do RushHourGraphics.drawLine(isHorz,x,y,45,29,50,32);
			do RushHourGraphics.drawLine(isHorz,x,y,50,32,18,32);	
		}
		if (~color) { // erasing car => draw seperating line
			do Screen.setColor(false);
			if (isHorz) {
				do Screen.drawRectangle(x+1,y+1,x+79,y+39); 
			}
			else {
				do Screen.drawRectangle(x+1,y+1,x+39,y+79);
			}
			do Screen.setColor(true); // draw
			do RushHourGraphics.drawLine(isHorz, x, y, 40, 1, 40, 39);
		}
	
		return;	
	}
  /**
		 draws a truck whose bounding square's top left corner is x,y;
  */
	function void drawTruck(int x, int y, boolean isHorz, boolean color) {
		if (color) { // drawing => erase seperating lines
			do Screen.setColor(false); // erase
			do RushHourGraphics.drawLine(isHorz, x, y, 40, 6, 40, 34);
			do RushHourGraphics.drawLine(isHorz, x, y, 80, 10, 80, 30);
		
			do Screen.setColor(true);
			// draw the truck
			do RushHourGraphics.drawHexagon(isHorz,x,y,85,6,100,6,109,14,109,26,100,34,85,34);
			do RushHourGraphics.drawLines4v(isHorz,x,y,10,6,78,6,78,34,10,34);
			do RushHourGraphics.drawLine(isHorz,x,y,10,6,10,34);
			do RushHourGraphics.drawLine(isHorz,x,y,78,10,85,10);
			do RushHourGraphics.drawLine(isHorz,x,y,78,30,85,30);
    }
		if (~color) { // erasing car => draw seperating lines
			do Screen.setColor(false); 
			if (isHorz) {
				do Screen.drawRectangle(x+1,y+1,x+119,y+39); 
			}
			else {
				do Screen.drawRectangle(x+1,y+1,x+39,y+119);
			}
			do Screen.setColor(true);
			do RushHourGraphics.drawLine(isHorz, x, y, 40, 1, 40, 39);
			do RushHourGraphics.drawLine(isHorz, x, y, 80, 1, 80, 39);
		}
		return;
	}

	function void drawRedCar(int x, int y, boolean color) {				
		if (color) { // drawing => erase seperating line
			do Screen.setColor(false); // erase
			do RushHourGraphics.drawLine(true, x, y, 40, 6, 40, 34);
			do Screen.setColor(true);
		
			do Screen.drawRectangle(x+24,y+12,x+45,y+28); 
		
			do RushHourGraphics.drawHexagon(true,x,y,9,6,60,6,71,11,71,28,60,34,9,34);
			do RushHourGraphics.drawHexagon(true,x,y,12,12,18,8,24,11,24,29,18,32,12,28);
			do RushHourGraphics.drawLines4v(true,x,y,24,11,45,11,45,29,24,29);
			do RushHourGraphics.drawLines4v(true,x,y,18,8,50,8,54,20,50,32);
			do RushHourGraphics.drawLine(true,x,y,45,11,50,8);
			do RushHourGraphics.drawLine(true,x,y,45,29,50,32);
			do RushHourGraphics.drawLine(true,x,y,50,32,18,32);	
		}
		if (~color) { // erasing car => draw seperating line
			do Screen.setColor(false);
		
			do Screen.drawRectangle(x+1,y+1,x+79,y+39); 
		
			do Screen.setColor(true); // draw
			do RushHourGraphics.drawLine(true, x, y, 40, 1, 40, 39);
		}
	
		return;
	}
	/**
		 draws an arrow cursor on the screen indicating a certain direction of movement.
	*/
	function void drawArrowCursor(int x, int y, boolean isHorz, boolean leftOrUp, boolean erase) {
		var int sx, sy;//, tx1, ty1, tx2, ty2, tx3, ty3;
		
		do Screen.setColor(~erase);
		if (isHorz) {
			let sy = y + 20;
			if (leftOrUp) { // arrow left
				let sx = x + 2;				
				do Screen.drawLine(sx, sy, sx + 6, sy);				
				do Screen.drawLine(sx , sy, sx + 3, sy -3);
				do Screen.drawLine(sx , sy, sx + 3, sy + 3);
			   	
			} 
			else { // arrow right
				let sx = x + 38;				
				do Screen.drawLine(sx, sy, sx - 6, sy);				
				do Screen.drawLine(sx, sy, sx - 3, sy -3);
				do Screen.drawLine(sx, sy, sx -3, sy + 3);
			
			}
		}
		else { // a vertical arrow
			let sx = x+20;
			if(leftOrUp) { // arrow up
				let sy = y + 2;	
				do Screen.drawLine(sx, sy, sx , sy + 6);				
				do Screen.drawLine(sx , sy, sx - 3, sy + 3);
				do Screen.drawLine(sx , sy, sx + 3, sy + 3); 
			}
			else { // arrow down
				let sy = y + 38;	
				do Screen.drawLine(sx, sy, sx , sy - 6);				
				do Screen.drawLine(sx , sy, sx - 3, sy - 3);
				do Screen.drawLine(sx , sy, sx + 3, sy - 3); 
			}
		}
		return;
	}	
	

	/**
		 draws four small corners starting at top-left position x,y on the screen.
		 The corners highlight a square of size 39X39. 
	*/
	function void drawCrossHairs(int x, int y, boolean erase) {
		do Screen.setColor(~erase);
		do Screen.drawLine(x+1,y+1,x+1,y+5);
		do Screen.drawLine(x+2,y+1,x+5,y+1);
		do Screen.drawLine(x+39,y+1,x+35,y+1);
		do Screen.drawLine(x+39,y+1,x+39,y+5);
		do Screen.drawLine(x+1,y+35,x+1,y+39);
		do Screen.drawLine(x+1,y+39,x+5,y+39);
		do Screen.drawLine(x+39,y+35,x+39,y+39);
		do Screen.drawLine(x+35,y+39,x+39,y+39);		
		return;
		
	}
	
	/** draws a star
	 */
	function void drawStar(int x, int y, int size) {
		do Screen.setColor(true);
		do Screen.drawLine(x+(size/2), y, x+(size/3), y+(size/3));
		do Screen.drawLine(x+(size/3), y+(size/3), x , y+(size/3));
		do Screen.drawLine(x , y+(size/3), x+(5*(size/18)), y+(2*(size/3)));
		do Screen.drawLine(x+(5*(size/18)), y+(2*(size/3)), x+(size/9), y+size);
		do Screen.drawLine(x+(size/9), y+size, x+(size/2), y + ((7*size)/9));   //!!!
		do Screen.drawLine(x+(size/2), y + ((7*size)/9), x+(8*(size/9)), y+size);
		do Screen.drawLine(x+(8*(size/9)), y+size, x+(14*(size/18)), y+(2*(size/3)));
		do Screen.drawLine(x+(14*(size/18)), y+(2*(size/3)), x+size, y+(size/3));
		do Screen.drawLine(x+size, y+(size/3), x+(2*(size/3)), y+(size/3));	
		do Screen.drawLine(x+(2*(size/3)), y+(size/3), x+(size/2), y);

		return;
	}
	function void drawEyedStar(int x, int y, int size) {
		do RushHourGraphics.drawStar(x, y, size);
		do Screen.drawCircle(x+(7*(size/18)) , y+(4*(size/9)), (size/18));
		do Screen.drawCircle(x+(11*(size/18)) , y+(4*(size/9)), (size/18));
		return;
	}

	/**
		 clears the screen and brings up a pretty victory screen
	
	*/
	function void victory() {
			
		do Screen.clearScreen();
		do Output.moveCursor(1,3);			
		do Screen.setColor(true);
		do Output.printString(" Good Job");	
		do RushHourGraphics.drawStar(40,40,40);
		do RushHourGraphics.drawEyedStar(200,40,40);
		do RushHourGraphics.drawStar(450,40,40);
		do RushHourGraphics.drawEyedStar(100,100,100);	
		do RushHourGraphics.drawStar(300,100,100);	
		do RushHourGraphics.drawStar(40,200,20);
		do RushHourGraphics.drawStar(450,200,20);
		do Output.moveCursor(20,20);		
		do Output.printString(" Hit any key to continue");
		while(Keyboard.keyPressed()=0){}
		return;
  }
}
