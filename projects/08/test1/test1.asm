// bootstrap code
@256
D=A
@SP
M=D
// call Sys.init 0
@Sys.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init$ret.1)
// function Array.new 0
(Array.new)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE1
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE1
D;JLT
@CODE_START1
0;JMP
(CHECK_SECOND_ITEM_POSITIVE1)
@SP
A=M-1
A=A-1
D=M
@TRUE1
D;JGE
(CODE_START1)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE1
D;JLT
(FALSE1)
@SP
A=M-1
A=A-1
M=0
@END1
0;JMP
(TRUE1)
@SP
A=M-1
A=A-1
M=-1
(END1)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Array.new$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Array.new$IF_FALSE0
0;JMP
// label IF_TRUE0
(Array.new$IF_TRUE0)
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Sys.error$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.2)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label IF_FALSE0
(Array.new$IF_FALSE0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc 1
@Memory.alloc$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Memory.alloc$ret.3)
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Array.dispose 0
(Array.dispose)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0
@SP
A=M-1
D=M
@THIS
M=D
@SP
M=M-1
// C_PUSH pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc 1
@Memory.deAlloc$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Memory.deAlloc$ret.4)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Main.main 2
(Main.main)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label WHILE_EXP0
(Main.main$WHILE_EXP0)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE3
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE3
D;JLT
@CODE_START3
0;JMP
(CHECK_SECOND_ITEM_POSITIVE3)
@SP
A=M-1
A=A-1
D=M
@FALSE3
D;JGE
(CODE_START3)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE3
D;JGT
(FALSE3)
@SP
A=M-1
A=A-1
M=0
@END3
0;JMP
(TRUE3)
@SP
A=M-1
A=A-1
M=-1
(END3)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Main.main$WHILE_END0
D;JNE
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP0
@Main.main$WHILE_EXP0
0;JMP
// label WHILE_END0
(Main.main$WHILE_END0)
// C_PUSH constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.poke 2
@Memory.poke$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Memory.poke$ret.1)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Math.init 1
(Math.init)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new 1
@Array.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret.1)
// C_POP static 1
@SP
A=M-1
D=M
@MATH.1
M=D
@SP
M=M-1
// C_PUSH constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new 1
@Array.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret.2)
// C_POP static 0
@SP
A=M-1
D=M
@MATH.0
M=D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label WHILE_EXP0
(Math.init$WHILE_EXP0)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE8
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE8
D;JLT
@CODE_START8
0;JMP
(CHECK_SECOND_ITEM_POSITIVE8)
@SP
A=M-1
A=A-1
D=M
@FALSE8
D;JGE
(CODE_START8)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE8
D;JGT
(FALSE8)
@SP
A=M-1
A=A-1
M=0
@END8
0;JMP
(TRUE8)
@SP
A=M-1
A=A-1
M=-1
(END8)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.init$WHILE_END0
D;JNE
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP0
@Math.init$WHILE_EXP0
0;JMP
// label WHILE_END0
(Math.init$WHILE_END0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Math.abs 0
(Math.abs)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE17
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE17
D;JLT
@CODE_START17
0;JMP
(CHECK_SECOND_ITEM_POSITIVE17)
@SP
A=M-1
A=A-1
D=M
@FALSE17
D;JGE
(CODE_START17)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE17
D;JGT
(FALSE17)
@SP
A=M-1
A=A-1
M=0
@END17
0;JMP
(TRUE17)
@SP
A=M-1
A=A-1
M=-1
(END17)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.abs$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.abs$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.abs$IF_TRUE0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE0
(Math.abs$IF_FALSE0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Math.multiply 5
(Math.multiply)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE19
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE19
D;JLT
@CODE_START19
0;JMP
(CHECK_SECOND_ITEM_POSITIVE19)
@SP
A=M-1
A=A-1
D=M
@FALSE19
D;JGE
(CODE_START19)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE19
D;JGT
(FALSE19)
@SP
A=M-1
A=A-1
M=0
@END19
0;JMP
(TRUE19)
@SP
A=M-1
A=A-1
M=-1
(END19)
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE20
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE20
D;JLT
@CODE_START20
0;JMP
(CHECK_SECOND_ITEM_POSITIVE20)
@SP
A=M-1
A=A-1
D=M
@TRUE20
D;JGE
(CODE_START20)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE20
D;JLT
(FALSE20)
@SP
A=M-1
A=A-1
M=0
@END20
0;JMP
(TRUE20)
@SP
A=M-1
A=A-1
M=-1
(END20)
@SP
M=M-1
// and
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=D&M
@SP
M=M-1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE22
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE22
D;JLT
@CODE_START22
0;JMP
(CHECK_SECOND_ITEM_POSITIVE22)
@SP
A=M-1
A=A-1
D=M
@TRUE22
D;JGE
(CODE_START22)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE22
D;JLT
(FALSE22)
@SP
A=M-1
A=A-1
M=0
@END22
0;JMP
(TRUE22)
@SP
A=M-1
A=A-1
M=-1
(END22)
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE23
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE23
D;JLT
@CODE_START23
0;JMP
(CHECK_SECOND_ITEM_POSITIVE23)
@SP
A=M-1
A=A-1
D=M
@FALSE23
D;JGE
(CODE_START23)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE23
D;JGT
(FALSE23)
@SP
A=M-1
A=A-1
M=0
@END23
0;JMP
(TRUE23)
@SP
A=M-1
A=A-1
M=-1
(END23)
@SP
M=M-1
// and
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=D&M
@SP
M=M-1
// or
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=D|M
@SP
M=M-1
// C_POP local 4
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs 1
@Math.abs$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret.3)
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs 1
@Math.abs$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret.4)
// C_POP argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE26
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE26
D;JLT
@CODE_START26
0;JMP
(CHECK_SECOND_ITEM_POSITIVE26)
@SP
A=M-1
A=A-1
D=M
@FALSE26
D;JGE
(CODE_START26)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE26
D;JGT
(FALSE26)
@SP
A=M-1
A=A-1
M=0
@END26
0;JMP
(TRUE26)
@SP
A=M-1
A=A-1
M=-1
(END26)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.multiply$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.multiply$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.multiply$IF_TRUE0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE0
(Math.multiply$IF_FALSE0)
// label WHILE_EXP0
(Math.multiply$WHILE_EXP0)
// C_PUSH local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE27
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE27
D;JLT
@CODE_START27
0;JMP
(CHECK_SECOND_ITEM_POSITIVE27)
@SP
A=M-1
A=A-1
D=M
@FALSE27
D;JGE
(CODE_START27)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE27
D;JGT
(FALSE27)
@SP
A=M-1
A=A-1
M=0
@END27
0;JMP
(TRUE27)
@SP
A=M-1
A=A-1
M=-1
(END27)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.multiply$WHILE_END0
D;JNE
// C_PUSH local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=D&M
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE31
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE31
D;JLT
@CODE_START31
0;JMP
(CHECK_SECOND_ITEM_POSITIVE31)
@SP
A=M-1
A=A-1
D=M
@TRUE31
D;JGE
(CODE_START31)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE31
D;JLT
(FALSE31)
@SP
A=M-1
A=A-1
M=0
@END31
0;JMP
(TRUE31)
@SP
A=M-1
A=A-1
M=-1
(END31)
@SP
M=M-1
// if-goto IF_TRUE1
@SP
A=M-1
D=M
@SP
M=M-1
@Math.multiply$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Math.multiply$IF_FALSE1
0;JMP
// label IF_TRUE1
(Math.multiply$IF_TRUE1)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 2
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE1
(Math.multiply$IF_FALSE1)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP0
@Math.multiply$WHILE_EXP0
0;JMP
// label WHILE_END0
(Math.multiply$WHILE_END0)
// C_PUSH local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// if-goto IF_TRUE2
@SP
A=M-1
D=M
@SP
M=M-1
@Math.multiply$IF_TRUE2
D;JNE
// goto IF_FALSE2
@Math.multiply$IF_FALSE2
0;JMP
// label IF_TRUE2
(Math.multiply$IF_TRUE2)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE2
(Math.multiply$IF_FALSE2)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Math.divide 4
(Math.divide)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=M-D
@TRUE38
D;JEQ
(FALSE38)
@SP
A=M-1
A=A-1
M=0
@END38
0;JMP
(TRUE38)
@SP
A=M-1
A=A-1
M=-1
(END38)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.divide$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.divide$IF_TRUE0)
// C_PUSH constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Sys.error$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.5)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label IF_FALSE0
(Math.divide$IF_FALSE0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE39
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE39
D;JLT
@CODE_START39
0;JMP
(CHECK_SECOND_ITEM_POSITIVE39)
@SP
A=M-1
A=A-1
D=M
@FALSE39
D;JGE
(CODE_START39)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE39
D;JGT
(FALSE39)
@SP
A=M-1
A=A-1
M=0
@END39
0;JMP
(TRUE39)
@SP
A=M-1
A=A-1
M=-1
(END39)
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE40
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE40
D;JLT
@CODE_START40
0;JMP
(CHECK_SECOND_ITEM_POSITIVE40)
@SP
A=M-1
A=A-1
D=M
@TRUE40
D;JGE
(CODE_START40)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE40
D;JLT
(FALSE40)
@SP
A=M-1
A=A-1
M=0
@END40
0;JMP
(TRUE40)
@SP
A=M-1
A=A-1
M=-1
(END40)
@SP
M=M-1
// and
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=D&M
@SP
M=M-1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE42
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE42
D;JLT
@CODE_START42
0;JMP
(CHECK_SECOND_ITEM_POSITIVE42)
@SP
A=M-1
A=A-1
D=M
@TRUE42
D;JGE
(CODE_START42)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE42
D;JLT
(FALSE42)
@SP
A=M-1
A=A-1
M=0
@END42
0;JMP
(TRUE42)
@SP
A=M-1
A=A-1
M=-1
(END42)
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE43
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE43
D;JLT
@CODE_START43
0;JMP
(CHECK_SECOND_ITEM_POSITIVE43)
@SP
A=M-1
A=A-1
D=M
@FALSE43
D;JGE
(CODE_START43)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE43
D;JGT
(FALSE43)
@SP
A=M-1
A=A-1
M=0
@END43
0;JMP
(TRUE43)
@SP
A=M-1
A=A-1
M=-1
(END43)
@SP
M=M-1
// and
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=D&M
@SP
M=M-1
// or
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=D|M
@SP
M=M-1
// C_POP local 2
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs 1
@Math.abs$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret.6)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs 1
@Math.abs$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret.7)
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label WHILE_EXP0
(Math.divide$WHILE_EXP0)
// C_PUSH local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$WHILE_END0
D;JNE
// C_PUSH constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE52
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE52
D;JLT
@CODE_START52
0;JMP
(CHECK_SECOND_ITEM_POSITIVE52)
@SP
A=M-1
A=A-1
D=M
@FALSE52
D;JGE
(CODE_START52)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE52
D;JGT
(FALSE52)
@SP
A=M-1
A=A-1
M=0
@END52
0;JMP
(TRUE52)
@SP
A=M-1
A=A-1
M=-1
(END52)
@SP
M=M-1
// C_POP local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE1
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Math.divide$IF_FALSE1
0;JMP
// label IF_TRUE1
(Math.divide$IF_TRUE1)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE61
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE61
D;JLT
@CODE_START61
0;JMP
(CHECK_SECOND_ITEM_POSITIVE61)
@SP
A=M-1
A=A-1
D=M
@TRUE61
D;JGE
(CODE_START61)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE61
D;JLT
(FALSE61)
@SP
A=M-1
A=A-1
M=0
@END61
0;JMP
(TRUE61)
@SP
A=M-1
A=A-1
M=-1
(END61)
@SP
M=M-1
// C_POP local 3
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE2
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE2
D;JNE
// goto IF_FALSE2
@Math.divide$IF_FALSE2
0;JMP
// label IF_TRUE2
(Math.divide$IF_TRUE2)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE2
(Math.divide$IF_FALSE2)
// label IF_FALSE1
(Math.divide$IF_FALSE1)
// goto WHILE_EXP0
@Math.divide$WHILE_EXP0
0;JMP
// label WHILE_END0
(Math.divide$WHILE_END0)
// label WHILE_EXP1
(Math.divide$WHILE_EXP1)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE65
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE65
D;JLT
@CODE_START65
0;JMP
(CHECK_SECOND_ITEM_POSITIVE65)
@SP
A=M-1
A=A-1
D=M
@TRUE65
D;JGE
(CODE_START65)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE65
D;JLT
(FALSE65)
@SP
A=M-1
A=A-1
M=0
@END65
0;JMP
(TRUE65)
@SP
A=M-1
A=A-1
M=-1
(END65)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$WHILE_END1
D;JNE
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE68
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE68
D;JLT
@CODE_START68
0;JMP
(CHECK_SECOND_ITEM_POSITIVE68)
@SP
A=M-1
A=A-1
D=M
@TRUE68
D;JGE
(CODE_START68)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE68
D;JLT
(FALSE68)
@SP
A=M-1
A=A-1
M=0
@END68
0;JMP
(TRUE68)
@SP
A=M-1
A=A-1
M=-1
(END68)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE3
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE3
D;JNE
// goto IF_FALSE3
@Math.divide$IF_FALSE3
0;JMP
// label IF_TRUE3
(Math.divide$IF_TRUE3)
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1
@MATH.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE3
(Math.divide$IF_FALSE3)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP1
@Math.divide$WHILE_EXP1
0;JMP
// label WHILE_END1
(Math.divide$WHILE_END1)
// C_PUSH local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// if-goto IF_TRUE4
@SP
A=M-1
D=M
@SP
M=M-1
@Math.divide$IF_TRUE4
D;JNE
// goto IF_FALSE4
@Math.divide$IF_FALSE4
0;JMP
// label IF_TRUE4
(Math.divide$IF_TRUE4)
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE4
(Math.divide$IF_FALSE4)
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Math.sqrt 2
(Math.sqrt)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE76
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE76
D;JLT
@CODE_START76
0;JMP
(CHECK_SECOND_ITEM_POSITIVE76)
@SP
A=M-1
A=A-1
D=M
@FALSE76
D;JGE
(CODE_START76)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE76
D;JGT
(FALSE76)
@SP
A=M-1
A=A-1
M=0
@END76
0;JMP
(TRUE76)
@SP
A=M-1
A=A-1
M=-1
(END76)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.sqrt$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.sqrt$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.sqrt$IF_TRUE0)
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Sys.error$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.8)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label IF_FALSE0
(Math.sqrt$IF_FALSE0)
// C_PUSH constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label WHILE_EXP0
(Math.sqrt$WHILE_EXP0)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE78
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE78
D;JLT
@CODE_START78
0;JMP
(CHECK_SECOND_ITEM_POSITIVE78)
@SP
A=M-1
A=A-1
D=M
@TRUE78
D;JGE
(CODE_START78)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE78
D;JLT
(FALSE78)
@SP
A=M-1
A=A-1
M=0
@END78
0;JMP
(TRUE78)
@SP
A=M-1
A=A-1
M=-1
(END78)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.sqrt$WHILE_END0
D;JNE
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// call Math.multiply 2
@Math.multiply$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.9)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE84
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE84
D;JLT
@CODE_START84
0;JMP
(CHECK_SECOND_ITEM_POSITIVE84)
@SP
A=M-1
A=A-1
D=M
@TRUE84
D;JGE
(CODE_START84)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE84
D;JLT
(FALSE84)
@SP
A=M-1
A=A-1
M=0
@END84
0;JMP
(TRUE84)
@SP
A=M-1
A=A-1
M=-1
(END84)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE1
@SP
A=M-1
D=M
@SP
M=M-1
@Math.sqrt$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Math.sqrt$IF_FALSE1
0;JMP
// label IF_TRUE1
(Math.sqrt$IF_TRUE1)
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MATH.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE1
(Math.sqrt$IF_FALSE1)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP0
@Math.sqrt$WHILE_EXP0
0;JMP
// label WHILE_END0
(Math.sqrt$WHILE_END0)
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Math.max 0
(Math.max)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE89
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE89
D;JLT
@CODE_START89
0;JMP
(CHECK_SECOND_ITEM_POSITIVE89)
@SP
A=M-1
A=A-1
D=M
@TRUE89
D;JGE
(CODE_START89)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE89
D;JLT
(FALSE89)
@SP
A=M-1
A=A-1
M=0
@END89
0;JMP
(TRUE89)
@SP
A=M-1
A=A-1
M=-1
(END89)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.max$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.max$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.max$IF_TRUE0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE0
(Math.max$IF_FALSE0)
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Math.min 0
(Math.min)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE90
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE90
D;JLT
@CODE_START90
0;JMP
(CHECK_SECOND_ITEM_POSITIVE90)
@SP
A=M-1
A=A-1
D=M
@FALSE90
D;JGE
(CODE_START90)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE90
D;JGT
(FALSE90)
@SP
A=M-1
A=A-1
M=0
@END90
0;JMP
(TRUE90)
@SP
A=M-1
A=A-1
M=-1
(END90)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Math.min$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.min$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.min$IF_TRUE0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE0
(Math.min$IF_FALSE0)
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Memory.init 0
(Memory.init)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0
@SP
A=M-1
D=M
@MEMORY.0
M=D
@SP
M=M-1
// C_PUSH constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MEMORY.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 14334
@14334
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 2049
@2049
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MEMORY.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 2050
@2050
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Memory.peek 0
(Memory.peek)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MEMORY.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Memory.poke 0
(Memory.poke)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0
@MEMORY.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Memory.alloc 2
(Memory.alloc)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE95
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE95
D;JLT
@CODE_START95
0;JMP
(CHECK_SECOND_ITEM_POSITIVE95)
@SP
A=M-1
A=A-1
D=M
@FALSE95
D;JGE
(CODE_START95)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE95
D;JGT
(FALSE95)
@SP
A=M-1
A=A-1
M=0
@END95
0;JMP
(TRUE95)
@SP
A=M-1
A=A-1
M=-1
(END95)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Memory.alloc$IF_FALSE0
0;JMP
// label IF_TRUE0
(Memory.alloc$IF_TRUE0)
// C_PUSH constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Sys.error$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.1)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label IF_FALSE0
(Memory.alloc$IF_FALSE0)
// C_PUSH constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label WHILE_EXP0
(Memory.alloc$WHILE_EXP0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE97
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE97
D;JLT
@CODE_START97
0;JMP
(CHECK_SECOND_ITEM_POSITIVE97)
@SP
A=M-1
A=A-1
D=M
@FALSE97
D;JGE
(CODE_START97)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE97
D;JGT
(FALSE97)
@SP
A=M-1
A=A-1
M=0
@END97
0;JMP
(TRUE97)
@SP
A=M-1
A=A-1
M=-1
(END97)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$WHILE_END0
D;JNE
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP0
@Memory.alloc$WHILE_EXP0
0;JMP
// label WHILE_END0
(Memory.alloc$WHILE_END0)
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 16379
@16379
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE101
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE101
D;JLT
@CODE_START101
0;JMP
(CHECK_SECOND_ITEM_POSITIVE101)
@SP
A=M-1
A=A-1
D=M
@TRUE101
D;JGE
(CODE_START101)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE101
D;JLT
(FALSE101)
@SP
A=M-1
A=A-1
M=0
@END101
0;JMP
(TRUE101)
@SP
A=M-1
A=A-1
M=-1
(END101)
@SP
M=M-1
// if-goto IF_TRUE1
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Memory.alloc$IF_FALSE1
0;JMP
// label IF_TRUE1
(Memory.alloc$IF_TRUE1)
// C_PUSH constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Sys.error$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.2)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label IF_FALSE1
(Memory.alloc$IF_FALSE1)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE104
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE104
D;JLT
@CODE_START104
0;JMP
(CHECK_SECOND_ITEM_POSITIVE104)
@SP
A=M-1
A=A-1
D=M
@TRUE104
D;JGE
(CODE_START104)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE104
D;JLT
(FALSE104)
@SP
A=M-1
A=A-1
M=0
@END104
0;JMP
(TRUE104)
@SP
A=M-1
A=A-1
M=-1
(END104)
@SP
M=M-1
// if-goto IF_TRUE2
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$IF_TRUE2
D;JNE
// goto IF_FALSE2
@Memory.alloc$IF_FALSE2
0;JMP
// label IF_TRUE2
(Memory.alloc$IF_TRUE2)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// eq
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=M-D
@TRUE112
D;JEQ
(FALSE112)
@SP
A=M-1
A=A-1
M=0
@END112
0;JMP
(TRUE112)
@SP
A=M-1
A=A-1
M=-1
(END112)
@SP
M=M-1
// if-goto IF_TRUE3
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.alloc$IF_TRUE3
D;JNE
// goto IF_FALSE3
@Memory.alloc$IF_FALSE3
0;JMP
// label IF_TRUE3
(Memory.alloc$IF_TRUE3)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto IF_END3
@Memory.alloc$IF_END3
0;JMP
// label IF_FALSE3
(Memory.alloc$IF_FALSE3)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_END3
(Memory.alloc$IF_END3)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_FALSE2
(Memory.alloc$IF_FALSE2)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Memory.deAlloc 2
(Memory.deAlloc)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=M-D
@TRUE128
D;JEQ
(FALSE128)
@SP
A=M-1
A=A-1
M=0
@END128
0;JMP
(TRUE128)
@SP
A=M-1
A=A-1
M=-1
(END128)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.deAlloc$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Memory.deAlloc$IF_FALSE0
0;JMP
// label IF_TRUE0
(Memory.deAlloc$IF_TRUE0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto IF_END0
@Memory.deAlloc$IF_END0
0;JMP
// label IF_FALSE0
(Memory.deAlloc$IF_FALSE0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// eq
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=M-D
@TRUE140
D;JEQ
(FALSE140)
@SP
A=M-1
A=A-1
M=0
@END140
0;JMP
(TRUE140)
@SP
A=M-1
A=A-1
M=-1
(END140)
@SP
M=M-1
// if-goto IF_TRUE1
@SP
A=M-1
D=M
@SP
M=M-1
@Memory.deAlloc$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Memory.deAlloc$IF_FALSE1
0;JMP
// label IF_TRUE1
(Memory.deAlloc$IF_TRUE1)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto IF_END1
@Memory.deAlloc$IF_END1
0;JMP
// label IF_FALSE1
(Memory.deAlloc$IF_FALSE1)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M+D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// C_POP pointer 1
@SP
A=M-1
D=M
@THAT
M=D
@SP
M=M-1
// C_PUSH temp 0
@R5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label IF_END1
(Memory.deAlloc$IF_END1)
// label IF_END0
(Memory.deAlloc$IF_END0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Sys.init 0
(Sys.init)
// call Memory.init 0
@Memory.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.init
0;JMP
(Memory.init$ret.1)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// call Math.init 0
@Math.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.init
0;JMP
(Math.init$ret.2)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// call Main.main 0
@Main.main$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.main
0;JMP
(Main.main$ret.3)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label WHILE_EXP0
(Sys.init$WHILE_EXP0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.init$WHILE_END0
D;JNE
// goto WHILE_EXP0
@Sys.init$WHILE_EXP0
0;JMP
// label WHILE_END0
(Sys.init$WHILE_END0)
// function Sys.halt 0
(Sys.halt)
// label WHILE_EXP0
(Sys.halt$WHILE_EXP0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.halt$WHILE_END0
D;JNE
// goto WHILE_EXP0
@Sys.halt$WHILE_EXP0
0;JMP
// label WHILE_END0
(Sys.halt$WHILE_END0)
// function Sys.wait 1
(Sys.wait)
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE149
D;JLT
@SP
A=M-1
A=A-1
D=M
@TRUE149
D;JLT
@CODE_START149
0;JMP
(CHECK_SECOND_ITEM_POSITIVE149)
@SP
A=M-1
A=A-1
D=M
@FALSE149
D;JGE
(CODE_START149)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE149
D;JGT
(FALSE149)
@SP
A=M-1
A=A-1
M=0
@END149
0;JMP
(TRUE149)
@SP
A=M-1
A=A-1
M=-1
(END149)
@SP
M=M-1
// if-goto IF_TRUE0
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.wait$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Sys.wait$IF_FALSE0
0;JMP
// label IF_TRUE0
(Sys.wait$IF_TRUE0)
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error 1
@Sys.error$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret.4)
// C_POP temp 0
@SP
A=M-1
D=M
@R5
M=D
@SP
M=M-1
// label IF_FALSE0
(Sys.wait$IF_FALSE0)
// label WHILE_EXP0
(Sys.wait$WHILE_EXP0)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE150
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE150
D;JLT
@CODE_START150
0;JMP
(CHECK_SECOND_ITEM_POSITIVE150)
@SP
A=M-1
A=A-1
D=M
@TRUE150
D;JGE
(CODE_START150)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE150
D;JLT
(FALSE150)
@SP
A=M-1
A=A-1
M=0
@END150
0;JMP
(TRUE150)
@SP
A=M-1
A=A-1
M=-1
(END150)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.wait$WHILE_END0
D;JNE
// C_PUSH constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// label WHILE_EXP1
(Sys.wait$WHILE_EXP1)
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
A=M-1
D=M
@CHECK_SECOND_ITEM_POSITIVE152
D;JLT
@SP
A=M-1
A=A-1
D=M
@FALSE152
D;JLT
@CODE_START152
0;JMP
(CHECK_SECOND_ITEM_POSITIVE152)
@SP
A=M-1
A=A-1
D=M
@TRUE152
D;JGE
(CODE_START152)
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
D=D-M
@TRUE152
D;JLT
(FALSE152)
@SP
A=M-1
A=A-1
M=0
@END152
0;JMP
(TRUE152)
@SP
A=M-1
A=A-1
M=-1
(END152)
@SP
M=M-1
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.wait$WHILE_END1
D;JNE
// C_PUSH local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP local 0
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP1
@Sys.wait$WHILE_EXP1
0;JMP
// label WHILE_END1
(Sys.wait$WHILE_END1)
// C_PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
@SP
A=M-1
A=A-1
M=M-D
@SP
M=M-1
// C_POP argument 0
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
A=M-1
D=M
@R13
A=M
M=D
@SP
M=M-1
// goto WHILE_EXP0
@Sys.wait$WHILE_EXP0
0;JMP
// label WHILE_END0
(Sys.wait$WHILE_END0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@15
M=D
@5
A=D-A
D=M
@14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Sys.error 0
(Sys.error)
// label WHILE_EXP0
(Sys.error$WHILE_EXP0)
// C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
A=M-1
D=M
@SP
M=M-1
@Sys.error$WHILE_END0
D;JNE
// goto WHILE_EXP0
@Sys.error$WHILE_EXP0
0;JMP
// label WHILE_END0
(Sys.error$WHILE_END0)
